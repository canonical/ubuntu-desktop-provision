// Mocks generated by Mockito 5.4.3 from annotations
// in ubuntu_init/test/test_utils.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:sysmetrics/src/sysmetrics.dart' as _i6;
import 'package:ubuntu_init/ubuntu_init.dart' as _i3;
import 'package:ubuntu_provision/ubuntu_provision.dart' as _i2;
import 'package:ubuntu_utils/src/url_launcher.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProductInfo_0 extends _i1.SmartFake implements _i2.ProductInfo {
  _FakeProductInfo_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PrivacyService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPrivacyService extends _i1.Mock implements _i3.PrivacyService {
  MockPrivacyService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> isLocationEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isLocationEnabled,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> setLocationEnabled(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #setLocationEnabled,
          [enabled],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> isReportingEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isReportingEnabled,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> setReportingEnabled(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #setReportingEnabled,
          [enabled],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [ProductService].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductService extends _i1.Mock implements _i2.ProductService {
  MockProductService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductInfo getProductInfo() => (super.noSuchMethod(
        Invocation.method(
          #getProductInfo,
          [],
        ),
        returnValue: _FakeProductInfo_0(
          this,
          Invocation.method(
            #getProductInfo,
            [],
          ),
        ),
      ) as _i2.ProductInfo);

  @override
  String getReleaseNotesURL(String? languageCode) => (super.noSuchMethod(
        Invocation.method(
          #getReleaseNotesURL,
          [languageCode],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #getReleaseNotesURL,
            [languageCode],
          ),
        ),
      ) as String);
}

/// A class which mocks [Sysmetrics].
///
/// See the documentation for Mockito's code generation for more information.
class MockSysmetrics extends _i1.Mock implements _i3.Sysmetrics {
  MockSysmetrics() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String?> collect() => (super.noSuchMethod(
        Invocation.method(
          #collect,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> sendReport(
    String? data, {
    bool? alwaysReport = false,
    String? baseUrl = r'',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendReport,
          [data],
          {
            #alwaysReport: alwaysReport,
            #baseUrl: baseUrl,
          },
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> sendDecline({
    bool? alwaysReport = false,
    String? baseUrl = r'',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendDecline,
          [],
          {
            #alwaysReport: alwaysReport,
            #baseUrl: baseUrl,
          },
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> collectAndSend(
    _i6.ReportType? type, {
    bool? alwaysReport = false,
    String? baseUrl = r'',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #collectAndSend,
          [type],
          {
            #alwaysReport: alwaysReport,
            #baseUrl: baseUrl,
          },
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);
}

/// A class which mocks [UrlLauncher].
///
/// See the documentation for Mockito's code generation for more information.
class MockUrlLauncher extends _i1.Mock implements _i7.UrlLauncher {
  MockUrlLauncher() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> canLaunchUrl(String? url) => (super.noSuchMethod(
        Invocation.method(
          #canLaunchUrl,
          [url],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> launchUrl(String? url) => (super.noSuchMethod(
        Invocation.method(
          #launchUrl,
          [url],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [InitModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockInitModel extends _i1.Mock implements _i3.InitModel {
  MockInitModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> launchDesktopSession() => (super.noSuchMethod(
        Invocation.method(
          #launchDesktopSession,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  bool hasRoute(String? route) => (super.noSuchMethod(
        Invocation.method(
          #hasRoute,
          [route],
        ),
        returnValue: false,
      ) as bool);
}
