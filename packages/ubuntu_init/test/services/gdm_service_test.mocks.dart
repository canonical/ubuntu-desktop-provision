// Mocks generated by Mockito 5.4.3 from annotations
// in ubuntu_init/test/services/gdm_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dbus/src/dbus_client.dart' as _i2;
import 'package:dbus/src/dbus_method_response.dart' as _i3;
import 'package:dbus/src/dbus_object.dart' as _i8;
import 'package:dbus/src/dbus_remote_object.dart' as _i9;
import 'package:dbus/src/dbus_signal.dart' as _i4;
import 'package:dbus/src/dbus_value.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDBusProcessCredentials_0 extends _i1.SmartFake
    implements _i2.DBusProcessCredentials {
  _FakeDBusProcessCredentials_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDBusMethodSuccessResponse_1 extends _i1.SmartFake
    implements _i3.DBusMethodSuccessResponse {
  _FakeDBusMethodSuccessResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDBusSignal_2 extends _i1.SmartFake implements _i4.DBusSignal {
  _FakeDBusSignal_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamSubscription_3<T> extends _i1.SmartFake
    implements _i5.StreamSubscription<T> {
  _FakeStreamSubscription_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_4<T> extends _i1.SmartFake implements _i5.Future<T> {
  _FakeFuture_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DBusClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockDBusClient extends _i1.Mock implements _i2.DBusClient {
  MockDBusClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get introspectable => (super.noSuchMethod(
        Invocation.getter(#introspectable),
        returnValue: false,
      ) as bool);

  @override
  String get uniqueName => (super.noSuchMethod(
        Invocation.getter(#uniqueName),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#uniqueName),
        ),
      ) as String);

  @override
  Iterable<String> get ownedNames => (super.noSuchMethod(
        Invocation.getter(#ownedNames),
        returnValue: <String>[],
      ) as Iterable<String>);

  @override
  _i5.Stream<String> get nameAcquired => (super.noSuchMethod(
        Invocation.getter(#nameAcquired),
        returnValue: _i5.Stream<String>.empty(),
      ) as _i5.Stream<String>);

  @override
  _i5.Stream<String> get nameLost => (super.noSuchMethod(
        Invocation.getter(#nameLost),
        returnValue: _i5.Stream<String>.empty(),
      ) as _i5.Stream<String>);

  @override
  _i5.Stream<_i2.DBusNameOwnerChangedEvent> get nameOwnerChanged =>
      (super.noSuchMethod(
        Invocation.getter(#nameOwnerChanged),
        returnValue: _i5.Stream<_i2.DBusNameOwnerChangedEvent>.empty(),
      ) as _i5.Stream<_i2.DBusNameOwnerChangedEvent>);

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i2.DBusRequestNameReply> requestName(
    String? name, {
    Set<_i2.DBusRequestNameFlag>? flags = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestName,
          [name],
          {#flags: flags},
        ),
        returnValue: _i5.Future<_i2.DBusRequestNameReply>.value(
            _i2.DBusRequestNameReply.primaryOwner),
      ) as _i5.Future<_i2.DBusRequestNameReply>);

  @override
  _i5.Future<_i2.DBusReleaseNameReply> releaseName(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #releaseName,
          [name],
        ),
        returnValue: _i5.Future<_i2.DBusReleaseNameReply>.value(
            _i2.DBusReleaseNameReply.released),
      ) as _i5.Future<_i2.DBusReleaseNameReply>);

  @override
  _i5.Future<List<String>> listQueuedOwners(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #listQueuedOwners,
          [name],
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);

  @override
  _i5.Future<List<String>> listNames() => (super.noSuchMethod(
        Invocation.method(
          #listNames,
          [],
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);

  @override
  _i5.Future<List<String>> listActivatableNames() => (super.noSuchMethod(
        Invocation.method(
          #listActivatableNames,
          [],
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);

  @override
  _i5.Future<_i2.DBusStartServiceByNameReply> startServiceByName(
          String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #startServiceByName,
          [name],
        ),
        returnValue: _i5.Future<_i2.DBusStartServiceByNameReply>.value(
            _i2.DBusStartServiceByNameReply.success),
      ) as _i5.Future<_i2.DBusStartServiceByNameReply>);

  @override
  _i5.Future<bool> nameHasOwner(String? name) => (super.noSuchMethod(
        Invocation.method(
          #nameHasOwner,
          [name],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<String?> getNameOwner(String? name) => (super.noSuchMethod(
        Invocation.method(
          #getNameOwner,
          [name],
        ),
        returnValue: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);

  @override
  _i5.Future<int> getConnectionUnixUser(String? name) => (super.noSuchMethod(
        Invocation.method(
          #getConnectionUnixUser,
          [name],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<int> getConnectionUnixProcessId(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConnectionUnixProcessId,
          [name],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<_i2.DBusProcessCredentials> getConnectionCredentials(
          String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConnectionCredentials,
          [name],
        ),
        returnValue: _i5.Future<_i2.DBusProcessCredentials>.value(
            _FakeDBusProcessCredentials_0(
          this,
          Invocation.method(
            #getConnectionCredentials,
            [name],
          ),
        )),
      ) as _i5.Future<_i2.DBusProcessCredentials>);

  @override
  _i5.Future<String> getId() => (super.noSuchMethod(
        Invocation.method(
          #getId,
          [],
        ),
        returnValue: _i5.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #getId,
            [],
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<void> ping([String? destination = r'org.freedesktop.DBus']) =>
      (super.noSuchMethod(
        Invocation.method(
          #ping,
          [destination],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<String> getMachineId(
          [String? destination = r'org.freedesktop.DBus']) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMachineId,
          [destination],
        ),
        returnValue: _i5.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #getMachineId,
            [destination],
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<_i3.DBusMethodSuccessResponse> callMethod({
    String? destination,
    required _i7.DBusObjectPath? path,
    String? interface,
    required String? name,
    Iterable<_i7.DBusValue>? values = const [],
    _i7.DBusSignature? replySignature,
    bool? noReplyExpected = false,
    bool? noAutoStart = false,
    bool? allowInteractiveAuthorization = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #callMethod,
          [],
          {
            #destination: destination,
            #path: path,
            #interface: interface,
            #name: name,
            #values: values,
            #replySignature: replySignature,
            #noReplyExpected: noReplyExpected,
            #noAutoStart: noAutoStart,
            #allowInteractiveAuthorization: allowInteractiveAuthorization,
          },
        ),
        returnValue: _i5.Future<_i3.DBusMethodSuccessResponse>.value(
            _FakeDBusMethodSuccessResponse_1(
          this,
          Invocation.method(
            #callMethod,
            [],
            {
              #destination: destination,
              #path: path,
              #interface: interface,
              #name: name,
              #values: values,
              #replySignature: replySignature,
              #noReplyExpected: noReplyExpected,
              #noAutoStart: noAutoStart,
              #allowInteractiveAuthorization: allowInteractiveAuthorization,
            },
          ),
        )),
      ) as _i5.Future<_i3.DBusMethodSuccessResponse>);

  @override
  _i5.Future<void> emitSignal({
    String? destination,
    required _i7.DBusObjectPath? path,
    required String? interface,
    required String? name,
    Iterable<_i7.DBusValue>? values = const [],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #emitSignal,
          [],
          {
            #destination: destination,
            #path: path,
            #interface: interface,
            #name: name,
            #values: values,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> registerObject(_i8.DBusObject? object) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerObject,
          [object],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> unregisterObject(_i8.DBusObject? object) =>
      (super.noSuchMethod(
        Invocation.method(
          #unregisterObject,
          [object],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [DBusRemoteObjectSignalStream].
///
/// See the documentation for Mockito's code generation for more information.
class MockDBusRemoteObjectSignalStream extends _i1.Mock
    implements _i9.DBusRemoteObjectSignalStream {
  MockDBusRemoteObjectSignalStream() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isBroadcast => (super.noSuchMethod(
        Invocation.getter(#isBroadcast),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<int> get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<bool> get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<_i4.DBusSignal> get first => (super.noSuchMethod(
        Invocation.getter(#first),
        returnValue: _i5.Future<_i4.DBusSignal>.value(_FakeDBusSignal_2(
          this,
          Invocation.getter(#first),
        )),
      ) as _i5.Future<_i4.DBusSignal>);

  @override
  _i5.Future<_i4.DBusSignal> get last => (super.noSuchMethod(
        Invocation.getter(#last),
        returnValue: _i5.Future<_i4.DBusSignal>.value(_FakeDBusSignal_2(
          this,
          Invocation.getter(#last),
        )),
      ) as _i5.Future<_i4.DBusSignal>);

  @override
  _i5.Future<_i4.DBusSignal> get single => (super.noSuchMethod(
        Invocation.getter(#single),
        returnValue: _i5.Future<_i4.DBusSignal>.value(_FakeDBusSignal_2(
          this,
          Invocation.getter(#single),
        )),
      ) as _i5.Future<_i4.DBusSignal>);

  @override
  _i5.StreamSubscription<_i4.DBusSignal> listen(
    void Function(_i4.DBusSignal)? onData, {
    Function? onError,
    void Function()? onDone,
    bool? cancelOnError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [onData],
          {
            #onError: onError,
            #onDone: onDone,
            #cancelOnError: cancelOnError,
          },
        ),
        returnValue: _FakeStreamSubscription_3<_i4.DBusSignal>(
          this,
          Invocation.method(
            #listen,
            [onData],
            {
              #onError: onError,
              #onDone: onDone,
              #cancelOnError: cancelOnError,
            },
          ),
        ),
      ) as _i5.StreamSubscription<_i4.DBusSignal>);

  @override
  _i5.Stream<_i4.DBusSignal> asBroadcastStream({
    void Function(_i5.StreamSubscription<_i4.DBusSignal>)? onListen,
    void Function(_i5.StreamSubscription<_i4.DBusSignal>)? onCancel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #asBroadcastStream,
          [],
          {
            #onListen: onListen,
            #onCancel: onCancel,
          },
        ),
        returnValue: _i5.Stream<_i4.DBusSignal>.empty(),
      ) as _i5.Stream<_i4.DBusSignal>);

  @override
  _i5.Stream<_i4.DBusSignal> where(bool Function(_i4.DBusSignal)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [test],
        ),
        returnValue: _i5.Stream<_i4.DBusSignal>.empty(),
      ) as _i5.Stream<_i4.DBusSignal>);

  @override
  _i5.Stream<S> map<S>(S Function(_i4.DBusSignal)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #map,
          [convert],
        ),
        returnValue: _i5.Stream<S>.empty(),
      ) as _i5.Stream<S>);

  @override
  _i5.Stream<E> asyncMap<E>(
          _i5.FutureOr<E> Function(_i4.DBusSignal)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncMap,
          [convert],
        ),
        returnValue: _i5.Stream<E>.empty(),
      ) as _i5.Stream<E>);

  @override
  _i5.Stream<E> asyncExpand<E>(
          _i5.Stream<E>? Function(_i4.DBusSignal)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncExpand,
          [convert],
        ),
        returnValue: _i5.Stream<E>.empty(),
      ) as _i5.Stream<E>);

  @override
  _i5.Stream<_i4.DBusSignal> handleError(
    Function? onError, {
    bool Function(dynamic)? test,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleError,
          [onError],
          {#test: test},
        ),
        returnValue: _i5.Stream<_i4.DBusSignal>.empty(),
      ) as _i5.Stream<_i4.DBusSignal>);

  @override
  _i5.Stream<S> expand<S>(Iterable<S> Function(_i4.DBusSignal)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #expand,
          [convert],
        ),
        returnValue: _i5.Stream<S>.empty(),
      ) as _i5.Stream<S>);

  @override
  _i5.Future<dynamic> pipe(
          _i5.StreamConsumer<_i4.DBusSignal>? streamConsumer) =>
      (super.noSuchMethod(
        Invocation.method(
          #pipe,
          [streamConsumer],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i5.Stream<S> transform<S>(
          _i5.StreamTransformer<_i4.DBusSignal, S>? streamTransformer) =>
      (super.noSuchMethod(
        Invocation.method(
          #transform,
          [streamTransformer],
        ),
        returnValue: _i5.Stream<S>.empty(),
      ) as _i5.Stream<S>);

  @override
  _i5.Future<_i4.DBusSignal> reduce(
          _i4.DBusSignal Function(
            _i4.DBusSignal,
            _i4.DBusSignal,
          )? combine) =>
      (super.noSuchMethod(
        Invocation.method(
          #reduce,
          [combine],
        ),
        returnValue: _i5.Future<_i4.DBusSignal>.value(_FakeDBusSignal_2(
          this,
          Invocation.method(
            #reduce,
            [combine],
          ),
        )),
      ) as _i5.Future<_i4.DBusSignal>);

  @override
  _i5.Future<S> fold<S>(
    S? initialValue,
    S Function(
      S,
      _i4.DBusSignal,
    )? combine,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fold,
          [
            initialValue,
            combine,
          ],
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<S>(
                this,
                Invocation.method(
                  #fold,
                  [
                    initialValue,
                    combine,
                  ],
                ),
              ),
              (S v) => _i5.Future<S>.value(v),
            ) ??
            _FakeFuture_4<S>(
              this,
              Invocation.method(
                #fold,
                [
                  initialValue,
                  combine,
                ],
              ),
            ),
      ) as _i5.Future<S>);

  @override
  _i5.Future<String> join([String? separator = r'']) => (super.noSuchMethod(
        Invocation.method(
          #join,
          [separator],
        ),
        returnValue: _i5.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #join,
            [separator],
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<bool> contains(Object? needle) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [needle],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> forEach(void Function(_i4.DBusSignal)? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #forEach,
          [action],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<bool> every(bool Function(_i4.DBusSignal)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #every,
          [test],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> any(bool Function(_i4.DBusSignal)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #any,
          [test],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Stream<R> cast<R>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _i5.Stream<R>.empty(),
      ) as _i5.Stream<R>);

  @override
  _i5.Future<List<_i4.DBusSignal>> toList() => (super.noSuchMethod(
        Invocation.method(
          #toList,
          [],
        ),
        returnValue: _i5.Future<List<_i4.DBusSignal>>.value(<_i4.DBusSignal>[]),
      ) as _i5.Future<List<_i4.DBusSignal>>);

  @override
  _i5.Future<Set<_i4.DBusSignal>> toSet() => (super.noSuchMethod(
        Invocation.method(
          #toSet,
          [],
        ),
        returnValue: _i5.Future<Set<_i4.DBusSignal>>.value(<_i4.DBusSignal>{}),
      ) as _i5.Future<Set<_i4.DBusSignal>>);

  @override
  _i5.Future<E> drain<E>([E? futureValue]) => (super.noSuchMethod(
        Invocation.method(
          #drain,
          [futureValue],
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<E>(
                this,
                Invocation.method(
                  #drain,
                  [futureValue],
                ),
              ),
              (E v) => _i5.Future<E>.value(v),
            ) ??
            _FakeFuture_4<E>(
              this,
              Invocation.method(
                #drain,
                [futureValue],
              ),
            ),
      ) as _i5.Future<E>);

  @override
  _i5.Stream<_i4.DBusSignal> take(int? count) => (super.noSuchMethod(
        Invocation.method(
          #take,
          [count],
        ),
        returnValue: _i5.Stream<_i4.DBusSignal>.empty(),
      ) as _i5.Stream<_i4.DBusSignal>);

  @override
  _i5.Stream<_i4.DBusSignal> takeWhile(bool Function(_i4.DBusSignal)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #takeWhile,
          [test],
        ),
        returnValue: _i5.Stream<_i4.DBusSignal>.empty(),
      ) as _i5.Stream<_i4.DBusSignal>);

  @override
  _i5.Stream<_i4.DBusSignal> skip(int? count) => (super.noSuchMethod(
        Invocation.method(
          #skip,
          [count],
        ),
        returnValue: _i5.Stream<_i4.DBusSignal>.empty(),
      ) as _i5.Stream<_i4.DBusSignal>);

  @override
  _i5.Stream<_i4.DBusSignal> skipWhile(bool Function(_i4.DBusSignal)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #skipWhile,
          [test],
        ),
        returnValue: _i5.Stream<_i4.DBusSignal>.empty(),
      ) as _i5.Stream<_i4.DBusSignal>);

  @override
  _i5.Stream<_i4.DBusSignal> distinct(
          [bool Function(
            _i4.DBusSignal,
            _i4.DBusSignal,
          )? equals]) =>
      (super.noSuchMethod(
        Invocation.method(
          #distinct,
          [equals],
        ),
        returnValue: _i5.Stream<_i4.DBusSignal>.empty(),
      ) as _i5.Stream<_i4.DBusSignal>);

  @override
  _i5.Future<_i4.DBusSignal> firstWhere(
    bool Function(_i4.DBusSignal)? test, {
    _i4.DBusSignal Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #firstWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i5.Future<_i4.DBusSignal>.value(_FakeDBusSignal_2(
          this,
          Invocation.method(
            #firstWhere,
            [test],
            {#orElse: orElse},
          ),
        )),
      ) as _i5.Future<_i4.DBusSignal>);

  @override
  _i5.Future<_i4.DBusSignal> lastWhere(
    bool Function(_i4.DBusSignal)? test, {
    _i4.DBusSignal Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #lastWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i5.Future<_i4.DBusSignal>.value(_FakeDBusSignal_2(
          this,
          Invocation.method(
            #lastWhere,
            [test],
            {#orElse: orElse},
          ),
        )),
      ) as _i5.Future<_i4.DBusSignal>);

  @override
  _i5.Future<_i4.DBusSignal> singleWhere(
    bool Function(_i4.DBusSignal)? test, {
    _i4.DBusSignal Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #singleWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i5.Future<_i4.DBusSignal>.value(_FakeDBusSignal_2(
          this,
          Invocation.method(
            #singleWhere,
            [test],
            {#orElse: orElse},
          ),
        )),
      ) as _i5.Future<_i4.DBusSignal>);

  @override
  _i5.Future<_i4.DBusSignal> elementAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #elementAt,
          [index],
        ),
        returnValue: _i5.Future<_i4.DBusSignal>.value(_FakeDBusSignal_2(
          this,
          Invocation.method(
            #elementAt,
            [index],
          ),
        )),
      ) as _i5.Future<_i4.DBusSignal>);

  @override
  _i5.Stream<_i4.DBusSignal> timeout(
    Duration? timeLimit, {
    void Function(_i5.EventSink<_i4.DBusSignal>)? onTimeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #timeout,
          [timeLimit],
          {#onTimeout: onTimeout},
        ),
        returnValue: _i5.Stream<_i4.DBusSignal>.empty(),
      ) as _i5.Stream<_i4.DBusSignal>);
}
