// Mocks generated by Mockito 5.4.4 from annotations
// in ubuntu_provision/test/test_utils.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i13;
import 'dart:convert' as _i23;
import 'dart:io' as _i10;
import 'dart:typed_data' as _i24;
import 'dart:ui' as _i18;

import 'package:dbus/dbus.dart' as _i20;
import 'package:file/file.dart' as _i3;
import 'package:flutter/foundation.dart' as _i8;
import 'package:flutter/services.dart' as _i7;
import 'package:flutter/src/widgets/basic.dart' as _i5;
import 'package:flutter/src/widgets/framework.dart' as _i6;
import 'package:flutter/src/widgets/notification_listener.dart' as _i22;
import 'package:flutter/widgets.dart' as _i17;
import 'package:flutter_svg/svg.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i19;
import 'package:nm/nm.dart' as _i9;
import 'package:subiquity_client/subiquity_client.dart' as _i2;
import 'package:timezone_map/src/location.dart' as _i16;
import 'package:timezone_map/src/service.dart' as _i14;
import 'package:timezone_map/src/source.dart' as _i15;
import 'package:ubuntu_provision/services.dart' as _i4;
import 'package:ubuntu_utils/ubuntu_utils.dart' as _i21;
import 'package:vector_graphics/vector_graphics.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAdConnectionInfo_0 extends _i1.SmartFake
    implements _i2.AdConnectionInfo {
  _FakeAdConnectionInfo_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileSystem_1 extends _i1.SmartFake implements _i3.FileSystem {
  _FakeFileSystem_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIdentity_2 extends _i1.SmartFake implements _i4.Identity {
  _FakeIdentity_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeImageProvider_3<T extends Object> extends _i1.SmartFake
    implements _i5.ImageProvider<T> {
  _FakeImageProvider_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAlignmentGeometry_4 extends _i1.SmartFake
    implements _i5.AlignmentGeometry {
  _FakeAlignmentGeometry_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeState_5<T extends _i6.StatefulWidget> extends _i1.SmartFake
    implements _i6.State<T> {
  _FakeState_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeStatefulElement_6 extends _i1.SmartFake
    implements _i6.StatefulElement {
  _FakeStatefulElement_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_7 extends _i1.SmartFake
    implements _i8.DiagnosticsNode {
  _FakeDiagnosticsNode_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i8.TextTreeConfiguration? parentConfiguration,
    _i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.info,
  }) =>
      super.toString();
}

class _FakeKeyboardSetup_8 extends _i1.SmartFake implements _i2.KeyboardSetup {
  _FakeKeyboardSetup_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAnyStep_9 extends _i1.SmartFake implements _i2.AnyStep {
  _FakeAnyStep_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkManagerSettings_10 extends _i1.SmartFake
    implements _i9.NetworkManagerSettings {
  _FakeNetworkManagerSettings_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkManagerDnsManager_11 extends _i1.SmartFake
    implements _i9.NetworkManagerDnsManager {
  _FakeNetworkManagerDnsManager_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkManagerActiveConnection_12 extends _i1.SmartFake
    implements _i9.NetworkManagerActiveConnection {
  _FakeNetworkManagerActiveConnection_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUPowerKbdBacklight_13 extends _i1.SmartFake
    implements _i4.UPowerKbdBacklight {
  _FakeUPowerKbdBacklight_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUPowerDevice_14 extends _i1.SmartFake implements _i4.UPowerDevice {
  _FakeUPowerDevice_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProductInfo_15 extends _i1.SmartFake implements _i4.ProductInfo {
  _FakeProductInfo_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUdevDeviceInfo_16 extends _i1.SmartFake
    implements _i4.UdevDeviceInfo {
  _FakeUdevDeviceInfo_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_17 extends _i1.SmartFake implements _i6.Widget {
  _FakeWidget_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_18 extends _i1.SmartFake
    implements _i6.InheritedWidget {
  _FakeInheritedWidget_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeFile_19 extends _i1.SmartFake implements _i10.File {
  _FakeFile_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_20 extends _i1.SmartFake implements Uri {
  _FakeUri_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDirectory_21 extends _i1.SmartFake implements _i10.Directory {
  _FakeDirectory_21(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_22 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_22(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRandomAccessFile_23 extends _i1.SmartFake
    implements _i10.RandomAccessFile {
  _FakeRandomAccessFile_23(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIOSink_24 extends _i1.SmartFake implements _i10.IOSink {
  _FakeIOSink_24(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileStat_25 extends _i1.SmartFake implements _i10.FileStat {
  _FakeFileStat_25(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileSystemEntity_26 extends _i1.SmartFake
    implements _i10.FileSystemEntity {
  _FakeFileSystemEntity_26(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSvgTheme_27 extends _i1.SmartFake implements _i11.SvgTheme {
  _FakeSvgTheme_27(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSvgCacheKey_28 extends _i1.SmartFake implements _i11.SvgCacheKey {
  _FakeSvgCacheKey_28(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBytesLoader_29 extends _i1.SmartFake implements _i12.BytesLoader {
  _FakeBytesLoader_29(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStatelessElement_30 extends _i1.SmartFake
    implements _i6.StatelessElement {
  _FakeStatelessElement_30(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [AccessibilityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccessibilityService extends _i1.Mock
    implements _i4.AccessibilityService {
  MockAccessibilityService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<bool> getHighContrast() => (super.noSuchMethod(
        Invocation.method(
          #getHighContrast,
          [],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<void> setHighContrast(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #setHighContrast,
          [value],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<bool> getLargeText() => (super.noSuchMethod(
        Invocation.method(
          #getLargeText,
          [],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<void> setLargeText(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #setLargeText,
          [value],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<bool> getReduceAnimation() => (super.noSuchMethod(
        Invocation.method(
          #getReduceAnimation,
          [],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<void> setReduceAnimation(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #setReduceAnimation,
          [value],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<bool> getScreenReader() => (super.noSuchMethod(
        Invocation.method(
          #getScreenReader,
          [],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<void> setScreenReader(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #setScreenReader,
          [value],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<bool> getVisualAlerts() => (super.noSuchMethod(
        Invocation.method(
          #getVisualAlerts,
          [],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<void> setVisualAlerts(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #setVisualAlerts,
          [value],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<bool> getStickyKeys() => (super.noSuchMethod(
        Invocation.method(
          #getStickyKeys,
          [],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<void> setStickyKeys(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #setStickyKeys,
          [value],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<bool> getSlowKeys() => (super.noSuchMethod(
        Invocation.method(
          #getSlowKeys,
          [],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<void> setSlowKeys(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #setSlowKeys,
          [value],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<bool> getMouseKeys() => (super.noSuchMethod(
        Invocation.method(
          #getMouseKeys,
          [],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<void> setMouseKeys(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #setMouseKeys,
          [value],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<bool> getDesktopZoom() => (super.noSuchMethod(
        Invocation.method(
          #getDesktopZoom,
          [],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<void> setDesktopZoom(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #setDesktopZoom,
          [value],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<bool> isSupported() => (super.noSuchMethod(
        Invocation.method(
          #isSupported,
          [],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);
}

/// A class which mocks [ActiveDirectoryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockActiveDirectoryService extends _i1.Mock
    implements _i4.ActiveDirectoryService {
  MockActiveDirectoryService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<bool> hasSupport() => (super.noSuchMethod(
        Invocation.method(
          #hasSupport,
          [],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<bool> isUsed() => (super.noSuchMethod(
        Invocation.method(
          #isUsed,
          [],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<void> setUsed(bool? used) => (super.noSuchMethod(
        Invocation.method(
          #setUsed,
          [used],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<_i2.AdConnectionInfo> getConnectionInfo() => (super.noSuchMethod(
        Invocation.method(
          #getConnectionInfo,
          [],
        ),
        returnValue:
            _i13.Future<_i2.AdConnectionInfo>.value(_FakeAdConnectionInfo_0(
          this,
          Invocation.method(
            #getConnectionInfo,
            [],
          ),
        )),
      ) as _i13.Future<_i2.AdConnectionInfo>);

  @override
  _i13.Future<void> setConnectionInfo(_i2.AdConnectionInfo? info) =>
      (super.noSuchMethod(
        Invocation.method(
          #setConnectionInfo,
          [info],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<List<_i2.AdDomainNameValidation>> checkDomainName(
          String? domain) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkDomainName,
          [domain],
        ),
        returnValue: _i13.Future<List<_i2.AdDomainNameValidation>>.value(
            <_i2.AdDomainNameValidation>[]),
      ) as _i13.Future<List<_i2.AdDomainNameValidation>>);

  @override
  _i13.Future<_i2.AdAdminNameValidation> checkAdminName(String? admin) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkAdminName,
          [admin],
        ),
        returnValue: _i13.Future<_i2.AdAdminNameValidation>.value(
            _i2.AdAdminNameValidation.OK),
      ) as _i13.Future<_i2.AdAdminNameValidation>);

  @override
  _i13.Future<_i2.AdPasswordValidation> checkPassword(String? password) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkPassword,
          [password],
        ),
        returnValue: _i13.Future<_i2.AdPasswordValidation>.value(
            _i2.AdPasswordValidation.OK),
      ) as _i13.Future<_i2.AdPasswordValidation>);

  @override
  _i13.Future<_i2.AdDomainNameValidation> pingDomainController(
          String? domain) =>
      (super.noSuchMethod(
        Invocation.method(
          #pingDomainController,
          [domain],
        ),
        returnValue: _i13.Future<_i2.AdDomainNameValidation>.value(
            _i2.AdDomainNameValidation.OK),
      ) as _i13.Future<_i2.AdDomainNameValidation>);

  @override
  _i13.Future<_i2.AdJoinResult> getJoinResult({bool? wait = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getJoinResult,
          [],
          {#wait: wait},
        ),
        returnValue: _i13.Future<_i2.AdJoinResult>.value(_i2.AdJoinResult.OK),
      ) as _i13.Future<_i2.AdJoinResult>);
}

/// A class which mocks [ConfigService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfigService extends _i1.Mock implements _i4.ConfigService {
  MockConfigService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FileSystem get filesystem => (super.noSuchMethod(
        Invocation.getter(#filesystem),
        returnValue: _FakeFileSystem_1(
          this,
          Invocation.getter(#filesystem),
        ),
      ) as _i3.FileSystem);

  @override
  _i13.Future<T?> get<T>(
    String? key, {
    String? scopeOverride,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [key],
          {#scopeOverride: scopeOverride},
        ),
        returnValue: _i13.Future<T?>.value(),
      ) as _i13.Future<T?>);

  @override
  _i13.Future<Map<String, dynamic>> load() => (super.noSuchMethod(
        Invocation.method(
          #load,
          [],
        ),
        returnValue:
            _i13.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i13.Future<Map<String, dynamic>>);
}

/// A class which mocks [DesktopService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDesktopService extends _i1.Mock implements _i4.DesktopService {
  MockDesktopService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<void> inhibit() => (super.noSuchMethod(
        Invocation.method(
          #inhibit,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);
}

/// A class which mocks [GeoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeoService extends _i1.Mock implements _i14.GeoService {
  MockGeoService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void addSource(_i15.GeoSource? source) => super.noSuchMethod(
        Invocation.method(
          #addSource,
          [source],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeSource(_i15.GeoSource? source) => super.noSuchMethod(
        Invocation.method(
          #removeSource,
          [source],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<_i16.GeoLocation?> lookupLocation() => (super.noSuchMethod(
        Invocation.method(
          #lookupLocation,
          [],
        ),
        returnValue: _i13.Future<_i16.GeoLocation?>.value(),
      ) as _i13.Future<_i16.GeoLocation?>);

  @override
  _i13.Future<Iterable<_i16.GeoLocation>> searchLocation(String? location) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchLocation,
          [location],
        ),
        returnValue:
            _i13.Future<Iterable<_i16.GeoLocation>>.value(<_i16.GeoLocation>[]),
      ) as _i13.Future<Iterable<_i16.GeoLocation>>);

  @override
  _i13.Future<Iterable<_i16.GeoLocation>> searchCoordinates(
          _i16.LatLng? coordinates) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchCoordinates,
          [coordinates],
        ),
        returnValue:
            _i13.Future<Iterable<_i16.GeoLocation>>.value(<_i16.GeoLocation>[]),
      ) as _i13.Future<Iterable<_i16.GeoLocation>>);

  @override
  _i13.Future<Iterable<_i16.GeoLocation>> searchTimezone(String? timezone) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchTimezone,
          [timezone],
        ),
        returnValue:
            _i13.Future<Iterable<_i16.GeoLocation>>.value(<_i16.GeoLocation>[]),
      ) as _i13.Future<Iterable<_i16.GeoLocation>>);

  @override
  _i13.Future<void> cancelSearch() => (super.noSuchMethod(
        Invocation.method(
          #cancelSearch,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);
}

/// A class which mocks [IdentityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIdentityService extends _i1.Mock implements _i4.IdentityService {
  MockIdentityService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i4.Identity> getIdentity() => (super.noSuchMethod(
        Invocation.method(
          #getIdentity,
          [],
        ),
        returnValue: _i13.Future<_i4.Identity>.value(_FakeIdentity_2(
          this,
          Invocation.method(
            #getIdentity,
            [],
          ),
        )),
      ) as _i13.Future<_i4.Identity>);

  @override
  _i13.Future<void> setIdentity(_i4.Identity? identity) => (super.noSuchMethod(
        Invocation.method(
          #setIdentity,
          [identity],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<_i2.UsernameValidation> validateUsername(String? username) =>
      (super.noSuchMethod(
        Invocation.method(
          #validateUsername,
          [username],
        ),
        returnValue: _i13.Future<_i2.UsernameValidation>.value(
            _i2.UsernameValidation.OK),
      ) as _i13.Future<_i2.UsernameValidation>);
}

/// A class which mocks [Image].
///
/// See the documentation for Mockito's code generation for more information.
class MockImage extends _i1.Mock implements _i17.Image {
  MockImage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ImageProvider<Object> get image => (super.noSuchMethod(
        Invocation.getter(#image),
        returnValue: _FakeImageProvider_3<Object>(
          this,
          Invocation.getter(#image),
        ),
      ) as _i5.ImageProvider<Object>);

  @override
  _i18.FilterQuality get filterQuality => (super.noSuchMethod(
        Invocation.getter(#filterQuality),
        returnValue: _i18.FilterQuality.none,
      ) as _i18.FilterQuality);

  @override
  _i5.AlignmentGeometry get alignment => (super.noSuchMethod(
        Invocation.getter(#alignment),
        returnValue: _FakeAlignmentGeometry_4(
          this,
          Invocation.getter(#alignment),
        ),
      ) as _i5.AlignmentGeometry);

  @override
  _i5.ImageRepeat get repeat => (super.noSuchMethod(
        Invocation.getter(#repeat),
        returnValue: _i5.ImageRepeat.repeat,
      ) as _i5.ImageRepeat);

  @override
  bool get matchTextDirection => (super.noSuchMethod(
        Invocation.getter(#matchTextDirection),
        returnValue: false,
      ) as bool);

  @override
  bool get gaplessPlayback => (super.noSuchMethod(
        Invocation.getter(#gaplessPlayback),
        returnValue: false,
      ) as bool);

  @override
  bool get excludeFromSemantics => (super.noSuchMethod(
        Invocation.getter(#excludeFromSemantics),
        returnValue: false,
      ) as bool);

  @override
  bool get isAntiAlias => (super.noSuchMethod(
        Invocation.getter(#isAntiAlias),
        returnValue: false,
      ) as bool);

  @override
  _i6.State<_i17.Image> createState() => (super.noSuchMethod(
        Invocation.method(
          #createState,
          [],
        ),
        returnValue: _FakeState_5<_i17.Image>(
          this,
          Invocation.method(
            #createState,
            [],
          ),
        ),
      ) as _i6.State<_i17.Image>);

  @override
  void debugFillProperties(_i7.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(
          #debugFillProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.StatefulElement createElement() => (super.noSuchMethod(
        Invocation.method(
          #createElement,
          [],
        ),
        returnValue: _FakeStatefulElement_6(
          this,
          Invocation.method(
            #createElement,
            [],
          ),
        ),
      ) as _i6.StatefulElement);

  @override
  String toStringShort() => (super.noSuchMethod(
        Invocation.method(
          #toStringShort,
          [],
        ),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShort,
            [],
          ),
        ),
      ) as String);

  @override
  String toStringShallow({
    String? joiner = r', ',
    _i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringShallow,
          [],
          {
            #joiner: joiner,
            #minLevel: minLevel,
          },
        ),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShallow,
            [],
            {
              #joiner: joiner,
              #minLevel: minLevel,
            },
          ),
        ),
      ) as String);

  @override
  String toStringDeep({
    String? prefixLineOne = r'',
    String? prefixOtherLines,
    _i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringDeep,
          [],
          {
            #prefixLineOne: prefixLineOne,
            #prefixOtherLines: prefixOtherLines,
            #minLevel: minLevel,
          },
        ),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.method(
            #toStringDeep,
            [],
            {
              #prefixLineOne: prefixLineOne,
              #prefixOtherLines: prefixOtherLines,
              #minLevel: minLevel,
            },
          ),
        ),
      ) as String);

  @override
  _i8.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i8.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toDiagnosticsNode,
          [],
          {
            #name: name,
            #style: style,
          },
        ),
        returnValue: _FakeDiagnosticsNode_7(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
      ) as _i8.DiagnosticsNode);

  @override
  List<_i8.DiagnosticsNode> debugDescribeChildren() => (super.noSuchMethod(
        Invocation.method(
          #debugDescribeChildren,
          [],
        ),
        returnValue: <_i8.DiagnosticsNode>[],
      ) as List<_i8.DiagnosticsNode>);

  @override
  String toString({_i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [JournalService].
///
/// See the documentation for Mockito's code generation for more information.
class MockJournalService extends _i1.Mock implements _i4.JournalService {
  MockJournalService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Stream<String> start(
    List<String>? ids, {
    _i4.JournalOutput? output = _i4.JournalOutput.short,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #start,
          [ids],
          {#output: output},
        ),
        returnValue: _i13.Stream<String>.empty(),
      ) as _i13.Stream<String>);
}

/// A class which mocks [KeyboardService].
///
/// See the documentation for Mockito's code generation for more information.
class MockKeyboardService extends _i1.Mock implements _i4.KeyboardService {
  MockKeyboardService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get canDetectLayout => (super.noSuchMethod(
        Invocation.getter(#canDetectLayout),
        returnValue: false,
      ) as bool);

  @override
  _i13.Future<_i2.KeyboardSetup> getKeyboard() => (super.noSuchMethod(
        Invocation.method(
          #getKeyboard,
          [],
        ),
        returnValue: _i13.Future<_i2.KeyboardSetup>.value(_FakeKeyboardSetup_8(
          this,
          Invocation.method(
            #getKeyboard,
            [],
          ),
        )),
      ) as _i13.Future<_i2.KeyboardSetup>);

  @override
  _i13.Future<void> setKeyboard(_i2.KeyboardSetting? setting) =>
      (super.noSuchMethod(
        Invocation.method(
          #setKeyboard,
          [setting],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> setInputSource(
    _i2.KeyboardSetting? setting, {
    String? user,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInputSource,
          [setting],
          {#user: user},
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<_i2.AnyStep> getKeyboardStep([String? step = r'0']) =>
      (super.noSuchMethod(
        Invocation.method(
          #getKeyboardStep,
          [step],
        ),
        returnValue: _i13.Future<_i2.AnyStep>.value(_FakeAnyStep_9(
          this,
          Invocation.method(
            #getKeyboardStep,
            [step],
          ),
        )),
      ) as _i13.Future<_i2.AnyStep>);
}

/// A class which mocks [LocaleService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocaleService extends _i1.Mock implements _i4.LocaleService {
  MockLocaleService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<String> getLocale() => (super.noSuchMethod(
        Invocation.method(
          #getLocale,
          [],
        ),
        returnValue: _i13.Future<String>.value(_i19.dummyValue<String>(
          this,
          Invocation.method(
            #getLocale,
            [],
          ),
        )),
      ) as _i13.Future<String>);

  @override
  _i13.Future<void> setLocale(String? locale) => (super.noSuchMethod(
        Invocation.method(
          #setLocale,
          [locale],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);
}

/// A class which mocks [NetworkService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkService extends _i1.Mock implements _i4.NetworkService {
  MockNetworkService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);

  @override
  bool get isConnectedSite => (super.noSuchMethod(
        Invocation.getter(#isConnectedSite),
        returnValue: false,
      ) as bool);

  @override
  List<_i9.NetworkManagerDevice> get wiredDevices => (super.noSuchMethod(
        Invocation.getter(#wiredDevices),
        returnValue: <_i9.NetworkManagerDevice>[],
      ) as List<_i9.NetworkManagerDevice>);

  @override
  List<_i9.NetworkManagerDevice> get wirelessDevices => (super.noSuchMethod(
        Invocation.getter(#wirelessDevices),
        returnValue: <_i9.NetworkManagerDevice>[],
      ) as List<_i9.NetworkManagerDevice>);

  @override
  _i13.Stream<_i9.NetworkManagerDevice> get deviceAdded => (super.noSuchMethod(
        Invocation.getter(#deviceAdded),
        returnValue: _i13.Stream<_i9.NetworkManagerDevice>.empty(),
      ) as _i13.Stream<_i9.NetworkManagerDevice>);

  @override
  _i13.Stream<_i9.NetworkManagerDevice> get deviceRemoved =>
      (super.noSuchMethod(
        Invocation.getter(#deviceRemoved),
        returnValue: _i13.Stream<_i9.NetworkManagerDevice>.empty(),
      ) as _i13.Stream<_i9.NetworkManagerDevice>);

  @override
  _i13.Stream<_i9.NetworkManagerActiveConnection> get activeConnectionAdded =>
      (super.noSuchMethod(
        Invocation.getter(#activeConnectionAdded),
        returnValue: _i13.Stream<_i9.NetworkManagerActiveConnection>.empty(),
      ) as _i13.Stream<_i9.NetworkManagerActiveConnection>);

  @override
  _i13.Stream<_i9.NetworkManagerActiveConnection> get activeConnectionRemoved =>
      (super.noSuchMethod(
        Invocation.getter(#activeConnectionRemoved),
        returnValue: _i13.Stream<_i9.NetworkManagerActiveConnection>.empty(),
      ) as _i13.Stream<_i9.NetworkManagerActiveConnection>);

  @override
  _i13.Stream<List<String>> get propertiesChanged => (super.noSuchMethod(
        Invocation.getter(#propertiesChanged),
        returnValue: _i13.Stream<List<String>>.empty(),
      ) as _i13.Stream<List<String>>);

  @override
  List<_i9.NetworkManagerDevice> get devices => (super.noSuchMethod(
        Invocation.getter(#devices),
        returnValue: <_i9.NetworkManagerDevice>[],
      ) as List<_i9.NetworkManagerDevice>);

  @override
  List<_i9.NetworkManagerDevice> get allDevices => (super.noSuchMethod(
        Invocation.getter(#allDevices),
        returnValue: <_i9.NetworkManagerDevice>[],
      ) as List<_i9.NetworkManagerDevice>);

  @override
  bool get networkingEnabled => (super.noSuchMethod(
        Invocation.getter(#networkingEnabled),
        returnValue: false,
      ) as bool);

  @override
  bool get wirelessEnabled => (super.noSuchMethod(
        Invocation.getter(#wirelessEnabled),
        returnValue: false,
      ) as bool);

  @override
  bool get wirelessHardwareEnabled => (super.noSuchMethod(
        Invocation.getter(#wirelessHardwareEnabled),
        returnValue: false,
      ) as bool);

  @override
  bool get wwanEnabled => (super.noSuchMethod(
        Invocation.getter(#wwanEnabled),
        returnValue: false,
      ) as bool);

  @override
  bool get wwanHardwareEnabled => (super.noSuchMethod(
        Invocation.getter(#wwanHardwareEnabled),
        returnValue: false,
      ) as bool);

  @override
  List<_i9.NetworkManagerActiveConnection> get activeConnections =>
      (super.noSuchMethod(
        Invocation.getter(#activeConnections),
        returnValue: <_i9.NetworkManagerActiveConnection>[],
      ) as List<_i9.NetworkManagerActiveConnection>);

  @override
  String get primaryConnectionType => (super.noSuchMethod(
        Invocation.getter(#primaryConnectionType),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.getter(#primaryConnectionType),
        ),
      ) as String);

  @override
  _i9.NetworkManagerMetered get metered => (super.noSuchMethod(
        Invocation.getter(#metered),
        returnValue: _i9.NetworkManagerMetered.unknown,
      ) as _i9.NetworkManagerMetered);

  @override
  bool get startup => (super.noSuchMethod(
        Invocation.getter(#startup),
        returnValue: false,
      ) as bool);

  @override
  String get version => (super.noSuchMethod(
        Invocation.getter(#version),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.getter(#version),
        ),
      ) as String);

  @override
  _i9.NetworkManagerConnectivityState get connectivity => (super.noSuchMethod(
        Invocation.getter(#connectivity),
        returnValue: _i9.NetworkManagerConnectivityState.unknown,
      ) as _i9.NetworkManagerConnectivityState);

  @override
  bool get connectivityCheckAvailable => (super.noSuchMethod(
        Invocation.getter(#connectivityCheckAvailable),
        returnValue: false,
      ) as bool);

  @override
  bool get connectivityCheckEnabled => (super.noSuchMethod(
        Invocation.getter(#connectivityCheckEnabled),
        returnValue: false,
      ) as bool);

  @override
  String get connectivityCheckUri => (super.noSuchMethod(
        Invocation.getter(#connectivityCheckUri),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.getter(#connectivityCheckUri),
        ),
      ) as String);

  @override
  _i9.NetworkManagerState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i9.NetworkManagerState.unknown,
      ) as _i9.NetworkManagerState);

  @override
  _i9.NetworkManagerSettings get settings => (super.noSuchMethod(
        Invocation.getter(#settings),
        returnValue: _FakeNetworkManagerSettings_10(
          this,
          Invocation.getter(#settings),
        ),
      ) as _i9.NetworkManagerSettings);

  @override
  _i9.NetworkManagerDnsManager get dnsManager => (super.noSuchMethod(
        Invocation.getter(#dnsManager),
        returnValue: _FakeNetworkManagerDnsManager_11(
          this,
          Invocation.getter(#dnsManager),
        ),
      ) as _i9.NetworkManagerDnsManager);

  @override
  Map<String, Map<String, _i20.DBusValue>> getWifiSettings(
          {required String? ssid}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWifiSettings,
          [],
          {#ssid: ssid},
        ),
        returnValue: <String, Map<String, _i20.DBusValue>>{},
      ) as Map<String, Map<String, _i20.DBusValue>>);

  @override
  _i13.Future<void> markConfigured() => (super.noSuchMethod(
        Invocation.method(
          #markConfigured,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> connect() => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> setWirelessEnabled(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #setWirelessEnabled,
          [value],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> setWwanEnabled(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #setWwanEnabled,
          [value],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> setConnectivityCheckEnabled(bool? value) =>
      (super.noSuchMethod(
        Invocation.method(
          #setConnectivityCheckEnabled,
          [value],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<_i9.NetworkManagerActiveConnection> addAndActivateConnection({
    Map<String, Map<String, _i20.DBusValue>>? connection = const {},
    required _i9.NetworkManagerDevice? device,
    _i9.NetworkManagerAccessPoint? accessPoint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addAndActivateConnection,
          [],
          {
            #connection: connection,
            #device: device,
            #accessPoint: accessPoint,
          },
        ),
        returnValue: _i13.Future<_i9.NetworkManagerActiveConnection>.value(
            _FakeNetworkManagerActiveConnection_12(
          this,
          Invocation.method(
            #addAndActivateConnection,
            [],
            {
              #connection: connection,
              #device: device,
              #accessPoint: accessPoint,
            },
          ),
        )),
      ) as _i13.Future<_i9.NetworkManagerActiveConnection>);

  @override
  _i13.Future<_i9.NetworkManagerActiveConnection> activateConnection({
    required _i9.NetworkManagerDevice? device,
    _i9.NetworkManagerSettingsConnection? connection,
    _i9.NetworkManagerAccessPoint? accessPoint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #activateConnection,
          [],
          {
            #device: device,
            #connection: connection,
            #accessPoint: accessPoint,
          },
        ),
        returnValue: _i13.Future<_i9.NetworkManagerActiveConnection>.value(
            _FakeNetworkManagerActiveConnection_12(
          this,
          Invocation.method(
            #activateConnection,
            [],
            {
              #device: device,
              #connection: connection,
              #accessPoint: accessPoint,
            },
          ),
        )),
      ) as _i13.Future<_i9.NetworkManagerActiveConnection>);

  @override
  _i13.Future<void> deactivateConnection(
          _i9.NetworkManagerActiveConnection? connection) =>
      (super.noSuchMethod(
        Invocation.method(
          #deactivateConnection,
          [connection],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);
}

/// A class which mocks [PageConfigService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPageConfigService extends _i1.Mock implements _i4.PageConfigService {
  MockPageConfigService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, _i4.PageConfigEntry> get pages => (super.noSuchMethod(
        Invocation.getter(#pages),
        returnValue: <String, _i4.PageConfigEntry>{},
      ) as Map<String, _i4.PageConfigEntry>);

  @override
  bool get includeTryOrInstall => (super.noSuchMethod(
        Invocation.getter(#includeTryOrInstall),
        returnValue: false,
      ) as bool);

  @override
  _i4.ProvisioningMode get mode => (super.noSuchMethod(
        Invocation.getter(#mode),
        returnValue: _i4.ProvisioningMode.standard,
      ) as _i4.ProvisioningMode);

  @override
  set mode(_i4.ProvisioningMode? _mode) => super.noSuchMethod(
        Invocation.setter(
          #mode,
          _mode,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isOem => (super.noSuchMethod(
        Invocation.getter(#isOem),
        returnValue: false,
      ) as bool);

  @override
  List<String> get excludedPages => (super.noSuchMethod(
        Invocation.getter(#excludedPages),
        returnValue: <String>[],
      ) as List<String>);

  @override
  _i13.Future<void> load() => (super.noSuchMethod(
        Invocation.method(
          #load,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);
}

/// A class which mocks [PowerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPowerService extends _i1.Mock implements _i4.PowerService {
  MockPowerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.UPowerKbdBacklight get kbdBacklight => (super.noSuchMethod(
        Invocation.getter(#kbdBacklight),
        returnValue: _FakeUPowerKbdBacklight_13(
          this,
          Invocation.getter(#kbdBacklight),
        ),
      ) as _i4.UPowerKbdBacklight);

  @override
  set kbdBacklight(_i4.UPowerKbdBacklight? _kbdBacklight) => super.noSuchMethod(
        Invocation.setter(
          #kbdBacklight,
          _kbdBacklight,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get daemonVersion => (super.noSuchMethod(
        Invocation.getter(#daemonVersion),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.getter(#daemonVersion),
        ),
      ) as String);

  @override
  bool get onBattery => (super.noSuchMethod(
        Invocation.getter(#onBattery),
        returnValue: false,
      ) as bool);

  @override
  bool get lidIsPresent => (super.noSuchMethod(
        Invocation.getter(#lidIsPresent),
        returnValue: false,
      ) as bool);

  @override
  bool get lidIsClosed => (super.noSuchMethod(
        Invocation.getter(#lidIsClosed),
        returnValue: false,
      ) as bool);

  @override
  List<_i4.UPowerDevice> get devices => (super.noSuchMethod(
        Invocation.getter(#devices),
        returnValue: <_i4.UPowerDevice>[],
      ) as List<_i4.UPowerDevice>);

  @override
  _i4.UPowerDevice get displayDevice => (super.noSuchMethod(
        Invocation.getter(#displayDevice),
        returnValue: _FakeUPowerDevice_14(
          this,
          Invocation.getter(#displayDevice),
        ),
      ) as _i4.UPowerDevice);

  @override
  _i13.Stream<_i4.UPowerDevice> get deviceAdded => (super.noSuchMethod(
        Invocation.getter(#deviceAdded),
        returnValue: _i13.Stream<_i4.UPowerDevice>.empty(),
      ) as _i13.Stream<_i4.UPowerDevice>);

  @override
  _i13.Stream<_i4.UPowerDevice> get deviceRemoved => (super.noSuchMethod(
        Invocation.getter(#deviceRemoved),
        returnValue: _i13.Stream<_i4.UPowerDevice>.empty(),
      ) as _i13.Stream<_i4.UPowerDevice>);

  @override
  _i13.Stream<List<String>> get propertiesChanged => (super.noSuchMethod(
        Invocation.getter(#propertiesChanged),
        returnValue: _i13.Stream<List<String>>.empty(),
      ) as _i13.Stream<List<String>>);

  @override
  _i13.Future<void> connect() => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<String> getCriticalAction() => (super.noSuchMethod(
        Invocation.method(
          #getCriticalAction,
          [],
        ),
        returnValue: _i13.Future<String>.value(_i19.dummyValue<String>(
          this,
          Invocation.method(
            #getCriticalAction,
            [],
          ),
        )),
      ) as _i13.Future<String>);

  @override
  _i13.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);
}

/// A class which mocks [ProductService].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductService extends _i1.Mock implements _i4.ProductService {
  MockProductService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ProductInfo getProductInfo() => (super.noSuchMethod(
        Invocation.method(
          #getProductInfo,
          [],
        ),
        returnValue: _FakeProductInfo_15(
          this,
          Invocation.method(
            #getProductInfo,
            [],
          ),
        ),
      ) as _i4.ProductInfo);

  @override
  String getReleaseNotesURL(String? languageCode) => (super.noSuchMethod(
        Invocation.method(
          #getReleaseNotesURL,
          [languageCode],
        ),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.method(
            #getReleaseNotesURL,
            [languageCode],
          ),
        ),
      ) as String);
}

/// A class which mocks [SessionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionService extends _i1.Mock implements _i4.SessionService {
  MockSessionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<void> reboot({bool? immediate = false}) => (super.noSuchMethod(
        Invocation.method(
          #reboot,
          [],
          {#immediate: immediate},
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> shutdown({bool? immediate = false}) => (super.noSuchMethod(
        Invocation.method(
          #shutdown,
          [],
          {#immediate: immediate},
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);
}

/// A class which mocks [SoundService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSoundService extends _i1.Mock implements _i4.SoundService {
  MockSoundService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<void> load() => (super.noSuchMethod(
        Invocation.method(
          #load,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> play(_i4.SoundId? id) => (super.noSuchMethod(
        Invocation.method(
          #play,
          [id],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);
}

/// A class which mocks [TelemetryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTelemetryService extends _i1.Mock implements _i4.TelemetryService {
  MockTelemetryService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  _i13.Future<void> init([Map<String, dynamic>? metrics = const {}]) =>
      (super.noSuchMethod(
        Invocation.method(
          #init,
          [metrics],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> addStage(String? name) => (super.noSuchMethod(
        Invocation.method(
          #addStage,
          [name],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> addMetric(
    String? key,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMetric,
          [
            key,
            value,
          ],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> addMetrics(Map<String, dynamic>? entries) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMetrics,
          [entries],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);
}

/// A class which mocks [TimezoneService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimezoneService extends _i1.Mock implements _i4.TimezoneService {
  MockTimezoneService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<String> getTimezone() => (super.noSuchMethod(
        Invocation.method(
          #getTimezone,
          [],
        ),
        returnValue: _i13.Future<String>.value(_i19.dummyValue<String>(
          this,
          Invocation.method(
            #getTimezone,
            [],
          ),
        )),
      ) as _i13.Future<String>);

  @override
  _i13.Future<void> setTimezone(String? timezone) => (super.noSuchMethod(
        Invocation.method(
          #setTimezone,
          [timezone],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);
}

/// A class which mocks [UdevDeviceInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockUdevDeviceInfo extends _i1.Mock implements _i4.UdevDeviceInfo {
  MockUdevDeviceInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get fullName => (super.noSuchMethod(
        Invocation.getter(#fullName),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.getter(#fullName),
        ),
      ) as String);
}

/// A class which mocks [UdevService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUdevService extends _i1.Mock implements _i4.UdevService {
  MockUdevService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.UdevDeviceInfo bySysname(String? sysname) => (super.noSuchMethod(
        Invocation.method(
          #bySysname,
          [sysname],
        ),
        returnValue: _FakeUdevDeviceInfo_16(
          this,
          Invocation.method(
            #bySysname,
            [sysname],
          ),
        ),
      ) as _i4.UdevDeviceInfo);

  @override
  _i4.UdevDeviceInfo bySyspath(String? syspath) => (super.noSuchMethod(
        Invocation.method(
          #bySyspath,
          [syspath],
        ),
        returnValue: _FakeUdevDeviceInfo_16(
          this,
          Invocation.method(
            #bySyspath,
            [syspath],
          ),
        ),
      ) as _i4.UdevDeviceInfo);
}

/// A class which mocks [UrlLauncher].
///
/// See the documentation for Mockito's code generation for more information.
class MockUrlLauncher extends _i1.Mock implements _i21.UrlLauncher {
  MockUrlLauncher() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<bool> canLaunchUrl(String? url) => (super.noSuchMethod(
        Invocation.method(
          #canLaunchUrl,
          [url],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<bool> launchUrl(String? url) => (super.noSuchMethod(
        Invocation.method(
          #launchUrl,
          [url],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i6.BuildContext {
  @override
  _i6.Widget get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeWidget_17(
          this,
          Invocation.getter(#widget),
        ),
        returnValueForMissingStub: _FakeWidget_17(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i6.Widget);

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get debugDoingBuild => (super.noSuchMethod(
        Invocation.getter(#debugDoingBuild),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i6.InheritedWidget dependOnInheritedElement(
    _i6.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependOnInheritedElement,
          [ancestor],
          {#aspect: aspect},
        ),
        returnValue: _FakeInheritedWidget_18(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
        returnValueForMissingStub: _FakeInheritedWidget_18(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
      ) as _i6.InheritedWidget);

  @override
  void visitAncestorElements(_i6.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitAncestorElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildElements(_i6.ElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispatchNotification(_i22.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #dispatchNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.DiagnosticsNode describeElement(
    String? name, {
    _i8.DiagnosticsTreeStyle? style = _i8.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeElement,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_7(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_7(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
      ) as _i8.DiagnosticsNode);

  @override
  _i8.DiagnosticsNode describeWidget(
    String? name, {
    _i8.DiagnosticsTreeStyle? style = _i8.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeWidget,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_7(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_7(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
      ) as _i8.DiagnosticsNode);

  @override
  List<_i8.DiagnosticsNode> describeMissingAncestor(
          {required Type? expectedAncestorType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeMissingAncestor,
          [],
          {#expectedAncestorType: expectedAncestorType},
        ),
        returnValue: <_i8.DiagnosticsNode>[],
        returnValueForMissingStub: <_i8.DiagnosticsNode>[],
      ) as List<_i8.DiagnosticsNode>);

  @override
  _i8.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeOwnershipChain,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_7(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_7(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
      ) as _i8.DiagnosticsNode);
}

/// A class which mocks [File].
///
/// See the documentation for Mockito's code generation for more information.
class MockFile extends _i1.Mock implements _i10.File {
  @override
  _i10.File get absolute => (super.noSuchMethod(
        Invocation.getter(#absolute),
        returnValue: _FakeFile_19(
          this,
          Invocation.getter(#absolute),
        ),
        returnValueForMissingStub: _FakeFile_19(
          this,
          Invocation.getter(#absolute),
        ),
      ) as _i10.File);

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
        returnValueForMissingStub: _i19.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  Uri get uri => (super.noSuchMethod(
        Invocation.getter(#uri),
        returnValue: _FakeUri_20(
          this,
          Invocation.getter(#uri),
        ),
        returnValueForMissingStub: _FakeUri_20(
          this,
          Invocation.getter(#uri),
        ),
      ) as Uri);

  @override
  bool get isAbsolute => (super.noSuchMethod(
        Invocation.getter(#isAbsolute),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i10.Directory get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeDirectory_21(
          this,
          Invocation.getter(#parent),
        ),
        returnValueForMissingStub: _FakeDirectory_21(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i10.Directory);

  @override
  _i13.Future<_i10.File> create({
    bool? recursive = false,
    bool? exclusive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {
            #recursive: recursive,
            #exclusive: exclusive,
          },
        ),
        returnValue: _i13.Future<_i10.File>.value(_FakeFile_19(
          this,
          Invocation.method(
            #create,
            [],
            {
              #recursive: recursive,
              #exclusive: exclusive,
            },
          ),
        )),
        returnValueForMissingStub: _i13.Future<_i10.File>.value(_FakeFile_19(
          this,
          Invocation.method(
            #create,
            [],
            {
              #recursive: recursive,
              #exclusive: exclusive,
            },
          ),
        )),
      ) as _i13.Future<_i10.File>);

  @override
  void createSync({
    bool? recursive = false,
    bool? exclusive = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #createSync,
          [],
          {
            #recursive: recursive,
            #exclusive: exclusive,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Future<_i10.File> rename(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #rename,
          [newPath],
        ),
        returnValue: _i13.Future<_i10.File>.value(_FakeFile_19(
          this,
          Invocation.method(
            #rename,
            [newPath],
          ),
        )),
        returnValueForMissingStub: _i13.Future<_i10.File>.value(_FakeFile_19(
          this,
          Invocation.method(
            #rename,
            [newPath],
          ),
        )),
      ) as _i13.Future<_i10.File>);

  @override
  _i10.File renameSync(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #renameSync,
          [newPath],
        ),
        returnValue: _FakeFile_19(
          this,
          Invocation.method(
            #renameSync,
            [newPath],
          ),
        ),
        returnValueForMissingStub: _FakeFile_19(
          this,
          Invocation.method(
            #renameSync,
            [newPath],
          ),
        ),
      ) as _i10.File);

  @override
  _i13.Future<_i10.File> copy(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #copy,
          [newPath],
        ),
        returnValue: _i13.Future<_i10.File>.value(_FakeFile_19(
          this,
          Invocation.method(
            #copy,
            [newPath],
          ),
        )),
        returnValueForMissingStub: _i13.Future<_i10.File>.value(_FakeFile_19(
          this,
          Invocation.method(
            #copy,
            [newPath],
          ),
        )),
      ) as _i13.Future<_i10.File>);

  @override
  _i10.File copySync(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #copySync,
          [newPath],
        ),
        returnValue: _FakeFile_19(
          this,
          Invocation.method(
            #copySync,
            [newPath],
          ),
        ),
        returnValueForMissingStub: _FakeFile_19(
          this,
          Invocation.method(
            #copySync,
            [newPath],
          ),
        ),
      ) as _i10.File);

  @override
  _i13.Future<int> length() => (super.noSuchMethod(
        Invocation.method(
          #length,
          [],
        ),
        returnValue: _i13.Future<int>.value(0),
        returnValueForMissingStub: _i13.Future<int>.value(0),
      ) as _i13.Future<int>);

  @override
  int lengthSync() => (super.noSuchMethod(
        Invocation.method(
          #lengthSync,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i13.Future<DateTime> lastAccessed() => (super.noSuchMethod(
        Invocation.method(
          #lastAccessed,
          [],
        ),
        returnValue: _i13.Future<DateTime>.value(_FakeDateTime_22(
          this,
          Invocation.method(
            #lastAccessed,
            [],
          ),
        )),
        returnValueForMissingStub: _i13.Future<DateTime>.value(_FakeDateTime_22(
          this,
          Invocation.method(
            #lastAccessed,
            [],
          ),
        )),
      ) as _i13.Future<DateTime>);

  @override
  DateTime lastAccessedSync() => (super.noSuchMethod(
        Invocation.method(
          #lastAccessedSync,
          [],
        ),
        returnValue: _FakeDateTime_22(
          this,
          Invocation.method(
            #lastAccessedSync,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeDateTime_22(
          this,
          Invocation.method(
            #lastAccessedSync,
            [],
          ),
        ),
      ) as DateTime);

  @override
  _i13.Future<dynamic> setLastAccessed(DateTime? time) => (super.noSuchMethod(
        Invocation.method(
          #setLastAccessed,
          [time],
        ),
        returnValue: _i13.Future<dynamic>.value(),
        returnValueForMissingStub: _i13.Future<dynamic>.value(),
      ) as _i13.Future<dynamic>);

  @override
  void setLastAccessedSync(DateTime? time) => super.noSuchMethod(
        Invocation.method(
          #setLastAccessedSync,
          [time],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Future<DateTime> lastModified() => (super.noSuchMethod(
        Invocation.method(
          #lastModified,
          [],
        ),
        returnValue: _i13.Future<DateTime>.value(_FakeDateTime_22(
          this,
          Invocation.method(
            #lastModified,
            [],
          ),
        )),
        returnValueForMissingStub: _i13.Future<DateTime>.value(_FakeDateTime_22(
          this,
          Invocation.method(
            #lastModified,
            [],
          ),
        )),
      ) as _i13.Future<DateTime>);

  @override
  DateTime lastModifiedSync() => (super.noSuchMethod(
        Invocation.method(
          #lastModifiedSync,
          [],
        ),
        returnValue: _FakeDateTime_22(
          this,
          Invocation.method(
            #lastModifiedSync,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeDateTime_22(
          this,
          Invocation.method(
            #lastModifiedSync,
            [],
          ),
        ),
      ) as DateTime);

  @override
  _i13.Future<dynamic> setLastModified(DateTime? time) => (super.noSuchMethod(
        Invocation.method(
          #setLastModified,
          [time],
        ),
        returnValue: _i13.Future<dynamic>.value(),
        returnValueForMissingStub: _i13.Future<dynamic>.value(),
      ) as _i13.Future<dynamic>);

  @override
  void setLastModifiedSync(DateTime? time) => super.noSuchMethod(
        Invocation.method(
          #setLastModifiedSync,
          [time],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Future<_i10.RandomAccessFile> open(
          {_i10.FileMode? mode = _i10.FileMode.read}) =>
      (super.noSuchMethod(
        Invocation.method(
          #open,
          [],
          {#mode: mode},
        ),
        returnValue:
            _i13.Future<_i10.RandomAccessFile>.value(_FakeRandomAccessFile_23(
          this,
          Invocation.method(
            #open,
            [],
            {#mode: mode},
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i10.RandomAccessFile>.value(_FakeRandomAccessFile_23(
          this,
          Invocation.method(
            #open,
            [],
            {#mode: mode},
          ),
        )),
      ) as _i13.Future<_i10.RandomAccessFile>);

  @override
  _i10.RandomAccessFile openSync({_i10.FileMode? mode = _i10.FileMode.read}) =>
      (super.noSuchMethod(
        Invocation.method(
          #openSync,
          [],
          {#mode: mode},
        ),
        returnValue: _FakeRandomAccessFile_23(
          this,
          Invocation.method(
            #openSync,
            [],
            {#mode: mode},
          ),
        ),
        returnValueForMissingStub: _FakeRandomAccessFile_23(
          this,
          Invocation.method(
            #openSync,
            [],
            {#mode: mode},
          ),
        ),
      ) as _i10.RandomAccessFile);

  @override
  _i13.Stream<List<int>> openRead([
    int? start,
    int? end,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #openRead,
          [
            start,
            end,
          ],
        ),
        returnValue: _i13.Stream<List<int>>.empty(),
        returnValueForMissingStub: _i13.Stream<List<int>>.empty(),
      ) as _i13.Stream<List<int>>);

  @override
  _i10.IOSink openWrite({
    _i10.FileMode? mode = _i10.FileMode.write,
    _i23.Encoding? encoding = const _i23.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #openWrite,
          [],
          {
            #mode: mode,
            #encoding: encoding,
          },
        ),
        returnValue: _FakeIOSink_24(
          this,
          Invocation.method(
            #openWrite,
            [],
            {
              #mode: mode,
              #encoding: encoding,
            },
          ),
        ),
        returnValueForMissingStub: _FakeIOSink_24(
          this,
          Invocation.method(
            #openWrite,
            [],
            {
              #mode: mode,
              #encoding: encoding,
            },
          ),
        ),
      ) as _i10.IOSink);

  @override
  _i13.Future<_i24.Uint8List> readAsBytes() => (super.noSuchMethod(
        Invocation.method(
          #readAsBytes,
          [],
        ),
        returnValue: _i13.Future<_i24.Uint8List>.value(_i24.Uint8List(0)),
        returnValueForMissingStub:
            _i13.Future<_i24.Uint8List>.value(_i24.Uint8List(0)),
      ) as _i13.Future<_i24.Uint8List>);

  @override
  _i24.Uint8List readAsBytesSync() => (super.noSuchMethod(
        Invocation.method(
          #readAsBytesSync,
          [],
        ),
        returnValue: _i24.Uint8List(0),
        returnValueForMissingStub: _i24.Uint8List(0),
      ) as _i24.Uint8List);

  @override
  _i13.Future<String> readAsString(
          {_i23.Encoding? encoding = const _i23.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsString,
          [],
          {#encoding: encoding},
        ),
        returnValue: _i13.Future<String>.value(_i19.dummyValue<String>(
          this,
          Invocation.method(
            #readAsString,
            [],
            {#encoding: encoding},
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<String>.value(_i19.dummyValue<String>(
          this,
          Invocation.method(
            #readAsString,
            [],
            {#encoding: encoding},
          ),
        )),
      ) as _i13.Future<String>);

  @override
  String readAsStringSync({_i23.Encoding? encoding = const _i23.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsStringSync,
          [],
          {#encoding: encoding},
        ),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.method(
            #readAsStringSync,
            [],
            {#encoding: encoding},
          ),
        ),
        returnValueForMissingStub: _i19.dummyValue<String>(
          this,
          Invocation.method(
            #readAsStringSync,
            [],
            {#encoding: encoding},
          ),
        ),
      ) as String);

  @override
  _i13.Future<List<String>> readAsLines(
          {_i23.Encoding? encoding = const _i23.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsLines,
          [],
          {#encoding: encoding},
        ),
        returnValue: _i13.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i13.Future<List<String>>.value(<String>[]),
      ) as _i13.Future<List<String>>);

  @override
  List<String> readAsLinesSync(
          {_i23.Encoding? encoding = const _i23.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsLinesSync,
          [],
          {#encoding: encoding},
        ),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);

  @override
  _i13.Future<_i10.File> writeAsBytes(
    List<int>? bytes, {
    _i10.FileMode? mode = _i10.FileMode.write,
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeAsBytes,
          [bytes],
          {
            #mode: mode,
            #flush: flush,
          },
        ),
        returnValue: _i13.Future<_i10.File>.value(_FakeFile_19(
          this,
          Invocation.method(
            #writeAsBytes,
            [bytes],
            {
              #mode: mode,
              #flush: flush,
            },
          ),
        )),
        returnValueForMissingStub: _i13.Future<_i10.File>.value(_FakeFile_19(
          this,
          Invocation.method(
            #writeAsBytes,
            [bytes],
            {
              #mode: mode,
              #flush: flush,
            },
          ),
        )),
      ) as _i13.Future<_i10.File>);

  @override
  void writeAsBytesSync(
    List<int>? bytes, {
    _i10.FileMode? mode = _i10.FileMode.write,
    bool? flush = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeAsBytesSync,
          [bytes],
          {
            #mode: mode,
            #flush: flush,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Future<_i10.File> writeAsString(
    String? contents, {
    _i10.FileMode? mode = _i10.FileMode.write,
    _i23.Encoding? encoding = const _i23.Utf8Codec(),
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeAsString,
          [contents],
          {
            #mode: mode,
            #encoding: encoding,
            #flush: flush,
          },
        ),
        returnValue: _i13.Future<_i10.File>.value(_FakeFile_19(
          this,
          Invocation.method(
            #writeAsString,
            [contents],
            {
              #mode: mode,
              #encoding: encoding,
              #flush: flush,
            },
          ),
        )),
        returnValueForMissingStub: _i13.Future<_i10.File>.value(_FakeFile_19(
          this,
          Invocation.method(
            #writeAsString,
            [contents],
            {
              #mode: mode,
              #encoding: encoding,
              #flush: flush,
            },
          ),
        )),
      ) as _i13.Future<_i10.File>);

  @override
  void writeAsStringSync(
    String? contents, {
    _i10.FileMode? mode = _i10.FileMode.write,
    _i23.Encoding? encoding = const _i23.Utf8Codec(),
    bool? flush = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeAsStringSync,
          [contents],
          {
            #mode: mode,
            #encoding: encoding,
            #flush: flush,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Future<bool> exists() => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [],
        ),
        returnValue: _i13.Future<bool>.value(false),
        returnValueForMissingStub: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  bool existsSync() => (super.noSuchMethod(
        Invocation.method(
          #existsSync,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i13.Future<String> resolveSymbolicLinks() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinks,
          [],
        ),
        returnValue: _i13.Future<String>.value(_i19.dummyValue<String>(
          this,
          Invocation.method(
            #resolveSymbolicLinks,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<String>.value(_i19.dummyValue<String>(
          this,
          Invocation.method(
            #resolveSymbolicLinks,
            [],
          ),
        )),
      ) as _i13.Future<String>);

  @override
  String resolveSymbolicLinksSync() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinksSync,
          [],
        ),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.method(
            #resolveSymbolicLinksSync,
            [],
          ),
        ),
        returnValueForMissingStub: _i19.dummyValue<String>(
          this,
          Invocation.method(
            #resolveSymbolicLinksSync,
            [],
          ),
        ),
      ) as String);

  @override
  _i13.Future<_i10.FileStat> stat() => (super.noSuchMethod(
        Invocation.method(
          #stat,
          [],
        ),
        returnValue: _i13.Future<_i10.FileStat>.value(_FakeFileStat_25(
          this,
          Invocation.method(
            #stat,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i10.FileStat>.value(_FakeFileStat_25(
          this,
          Invocation.method(
            #stat,
            [],
          ),
        )),
      ) as _i13.Future<_i10.FileStat>);

  @override
  _i10.FileStat statSync() => (super.noSuchMethod(
        Invocation.method(
          #statSync,
          [],
        ),
        returnValue: _FakeFileStat_25(
          this,
          Invocation.method(
            #statSync,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeFileStat_25(
          this,
          Invocation.method(
            #statSync,
            [],
          ),
        ),
      ) as _i10.FileStat);

  @override
  _i13.Future<_i10.FileSystemEntity> delete({bool? recursive = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {#recursive: recursive},
        ),
        returnValue:
            _i13.Future<_i10.FileSystemEntity>.value(_FakeFileSystemEntity_26(
          this,
          Invocation.method(
            #delete,
            [],
            {#recursive: recursive},
          ),
        )),
        returnValueForMissingStub:
            _i13.Future<_i10.FileSystemEntity>.value(_FakeFileSystemEntity_26(
          this,
          Invocation.method(
            #delete,
            [],
            {#recursive: recursive},
          ),
        )),
      ) as _i13.Future<_i10.FileSystemEntity>);

  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
        Invocation.method(
          #deleteSync,
          [],
          {#recursive: recursive},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Stream<_i10.FileSystemEvent> watch({
    int? events = 15,
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {
            #events: events,
            #recursive: recursive,
          },
        ),
        returnValue: _i13.Stream<_i10.FileSystemEvent>.empty(),
        returnValueForMissingStub: _i13.Stream<_i10.FileSystemEvent>.empty(),
      ) as _i13.Stream<_i10.FileSystemEvent>);
}

/// A class which mocks [SvgFileLoader].
///
/// See the documentation for Mockito's code generation for more information.
class MockSvgFileLoader extends _i1.Mock implements _i11.SvgFileLoader {
  @override
  _i10.File get file => (super.noSuchMethod(
        Invocation.getter(#file),
        returnValue: _FakeFile_19(
          this,
          Invocation.getter(#file),
        ),
        returnValueForMissingStub: _FakeFile_19(
          this,
          Invocation.getter(#file),
        ),
      ) as _i10.File);

  @override
  String provideSvg(dynamic message) => (super.noSuchMethod(
        Invocation.method(
          #provideSvg,
          [message],
        ),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.method(
            #provideSvg,
            [message],
          ),
        ),
        returnValueForMissingStub: _i19.dummyValue<String>(
          this,
          Invocation.method(
            #provideSvg,
            [message],
          ),
        ),
      ) as String);

  @override
  _i13.Future<void> prepareMessage(_i6.BuildContext? context) =>
      (super.noSuchMethod(
        Invocation.method(
          #prepareMessage,
          [context],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i11.SvgTheme getTheme(_i6.BuildContext? context) => (super.noSuchMethod(
        Invocation.method(
          #getTheme,
          [context],
        ),
        returnValue: _FakeSvgTheme_27(
          this,
          Invocation.method(
            #getTheme,
            [context],
          ),
        ),
        returnValueForMissingStub: _FakeSvgTheme_27(
          this,
          Invocation.method(
            #getTheme,
            [context],
          ),
        ),
      ) as _i11.SvgTheme);

  @override
  _i13.Future<_i24.ByteData> loadBytes(_i6.BuildContext? context) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadBytes,
          [context],
        ),
        returnValue: _i13.Future<_i24.ByteData>.value(_i24.ByteData(0)),
        returnValueForMissingStub:
            _i13.Future<_i24.ByteData>.value(_i24.ByteData(0)),
      ) as _i13.Future<_i24.ByteData>);

  @override
  _i11.SvgCacheKey cacheKey(_i6.BuildContext? context) => (super.noSuchMethod(
        Invocation.method(
          #cacheKey,
          [context],
        ),
        returnValue: _FakeSvgCacheKey_28(
          this,
          Invocation.method(
            #cacheKey,
            [context],
          ),
        ),
        returnValueForMissingStub: _FakeSvgCacheKey_28(
          this,
          Invocation.method(
            #cacheKey,
            [context],
          ),
        ),
      ) as _i11.SvgCacheKey);
}

/// A class which mocks [SvgPicture].
///
/// See the documentation for Mockito's code generation for more information.
class MockSvgPicture extends _i1.Mock implements _i11.SvgPicture {
  @override
  _i5.BoxFit get fit => (super.noSuchMethod(
        Invocation.getter(#fit),
        returnValue: _i5.BoxFit.fill,
        returnValueForMissingStub: _i5.BoxFit.fill,
      ) as _i5.BoxFit);

  @override
  _i5.AlignmentGeometry get alignment => (super.noSuchMethod(
        Invocation.getter(#alignment),
        returnValue: _FakeAlignmentGeometry_4(
          this,
          Invocation.getter(#alignment),
        ),
        returnValueForMissingStub: _FakeAlignmentGeometry_4(
          this,
          Invocation.getter(#alignment),
        ),
      ) as _i5.AlignmentGeometry);

  @override
  _i12.BytesLoader get bytesLoader => (super.noSuchMethod(
        Invocation.getter(#bytesLoader),
        returnValue: _FakeBytesLoader_29(
          this,
          Invocation.getter(#bytesLoader),
        ),
        returnValueForMissingStub: _FakeBytesLoader_29(
          this,
          Invocation.getter(#bytesLoader),
        ),
      ) as _i12.BytesLoader);

  @override
  bool get matchTextDirection => (super.noSuchMethod(
        Invocation.getter(#matchTextDirection),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get allowDrawingOutsideViewBox => (super.noSuchMethod(
        Invocation.getter(#allowDrawingOutsideViewBox),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get excludeFromSemantics => (super.noSuchMethod(
        Invocation.getter(#excludeFromSemantics),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i18.Clip get clipBehavior => (super.noSuchMethod(
        Invocation.getter(#clipBehavior),
        returnValue: _i18.Clip.none,
        returnValueForMissingStub: _i18.Clip.none,
      ) as _i18.Clip);

  @override
  _i6.Widget build(_i6.BuildContext? context) => (super.noSuchMethod(
        Invocation.method(
          #build,
          [context],
        ),
        returnValue: _FakeWidget_17(
          this,
          Invocation.method(
            #build,
            [context],
          ),
        ),
        returnValueForMissingStub: _FakeWidget_17(
          this,
          Invocation.method(
            #build,
            [context],
          ),
        ),
      ) as _i6.Widget);

  @override
  void debugFillProperties(_i7.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(
          #debugFillProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.StatelessElement createElement() => (super.noSuchMethod(
        Invocation.method(
          #createElement,
          [],
        ),
        returnValue: _FakeStatelessElement_30(
          this,
          Invocation.method(
            #createElement,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeStatelessElement_30(
          this,
          Invocation.method(
            #createElement,
            [],
          ),
        ),
      ) as _i6.StatelessElement);

  @override
  String toStringShort() => (super.noSuchMethod(
        Invocation.method(
          #toStringShort,
          [],
        ),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShort,
            [],
          ),
        ),
        returnValueForMissingStub: _i19.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShort,
            [],
          ),
        ),
      ) as String);

  @override
  String toStringShallow({
    String? joiner = r', ',
    _i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringShallow,
          [],
          {
            #joiner: joiner,
            #minLevel: minLevel,
          },
        ),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShallow,
            [],
            {
              #joiner: joiner,
              #minLevel: minLevel,
            },
          ),
        ),
        returnValueForMissingStub: _i19.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShallow,
            [],
            {
              #joiner: joiner,
              #minLevel: minLevel,
            },
          ),
        ),
      ) as String);

  @override
  String toStringDeep({
    String? prefixLineOne = r'',
    String? prefixOtherLines,
    _i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringDeep,
          [],
          {
            #prefixLineOne: prefixLineOne,
            #prefixOtherLines: prefixOtherLines,
            #minLevel: minLevel,
          },
        ),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.method(
            #toStringDeep,
            [],
            {
              #prefixLineOne: prefixLineOne,
              #prefixOtherLines: prefixOtherLines,
              #minLevel: minLevel,
            },
          ),
        ),
        returnValueForMissingStub: _i19.dummyValue<String>(
          this,
          Invocation.method(
            #toStringDeep,
            [],
            {
              #prefixLineOne: prefixLineOne,
              #prefixOtherLines: prefixOtherLines,
              #minLevel: minLevel,
            },
          ),
        ),
      ) as String);

  @override
  _i8.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i8.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toDiagnosticsNode,
          [],
          {
            #name: name,
            #style: style,
          },
        ),
        returnValue: _FakeDiagnosticsNode_7(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_7(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
      ) as _i8.DiagnosticsNode);

  @override
  List<_i8.DiagnosticsNode> debugDescribeChildren() => (super.noSuchMethod(
        Invocation.method(
          #debugDescribeChildren,
          [],
        ),
        returnValue: <_i8.DiagnosticsNode>[],
        returnValueForMissingStub: <_i8.DiagnosticsNode>[],
      ) as List<_i8.DiagnosticsNode>);

  @override
  String toString({_i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.info}) =>
      super.toString();
}
