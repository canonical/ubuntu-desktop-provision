// coverage:ignore-file

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// ubuntu-report/sysmetrics
class LibSysmetrics {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibSysmetrics(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibSysmetrics.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> sysmetrics_collect(
    ffi.Pointer<ffi.Pointer<ffi.Char>> res,
  ) {
    return _sysmetrics_collect(
      res,
    );
  }

  late final _sysmetrics_collectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('sysmetrics_collect');
  late final _sysmetrics_collect = _sysmetrics_collectPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> sysmetrics_send_report(
    ffi.Pointer<ffi.Char> data,
    int alwaysReport,
    ffi.Pointer<ffi.Char> baseURL,
  ) {
    return _sysmetrics_send_report(
      data,
      alwaysReport,
      baseURL,
    );
  }

  late final _sysmetrics_send_reportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, GoUint8,
              ffi.Pointer<ffi.Char>)>>('sysmetrics_send_report');
  late final _sysmetrics_send_report = _sysmetrics_send_reportPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> sysmetrics_send_decline(
    int alwaysReport,
    ffi.Pointer<ffi.Char> baseURL,
  ) {
    return _sysmetrics_send_decline(
      alwaysReport,
      baseURL,
    );
  }

  late final _sysmetrics_send_declinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              GoUint8, ffi.Pointer<ffi.Char>)>>('sysmetrics_send_decline');
  late final _sysmetrics_send_decline = _sysmetrics_send_declinePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> sysmetrics_collect_and_send(
    int r,
    int alwaysReport,
    ffi.Pointer<ffi.Char> baseURL,
  ) {
    return _sysmetrics_collect_and_send(
      r,
      alwaysReport,
      baseURL,
    );
  }

  late final _sysmetrics_collect_and_sendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int32, GoUint8,
              ffi.Pointer<ffi.Char>)>>('sysmetrics_collect_and_send');
  late final _sysmetrics_collect_and_send =
      _sysmetrics_collect_and_sendPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(int, int, ffi.Pointer<ffi.Char>)>();
}

final class max_align_t extends ffi.Opaque {}

final class _GoString_ extends ffi.Struct {
  external ffi.Pointer<ffi.Char> p;

  @ptrdiff_t()
  external int n;
}

typedef ptrdiff_t = ffi.Long;

abstract class sysmetrics_report_type {
  static const int sysmetrics_report_interactive = 0;
  static const int sysmetrics_report_auto = 1;
  static const int sysmetrics_report_optout = 2;
}

final class GoInterface extends ffi.Struct {
  external ffi.Pointer<ffi.Void> t;

  external ffi.Pointer<ffi.Void> v;
}

final class GoSlice extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @GoInt()
  external int len;

  @GoInt()
  external int cap;
}

typedef GoInt = GoInt64;
typedef GoInt64 = ffi.LongLong;
typedef GoUint8 = ffi.UnsignedChar;

const int NULL = 0;
