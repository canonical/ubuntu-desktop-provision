// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EulaServiceClient is the client API for EulaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EulaServiceClient interface {
	AcceptEula(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type eulaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEulaServiceClient(cc grpc.ClientConnInterface) EulaServiceClient {
	return &eulaServiceClient{cc}
}

func (c *eulaServiceClient) AcceptEula(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/eula.EulaService/AcceptEula", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EulaServiceServer is the server API for EulaService service.
// All implementations must embed UnimplementedEulaServiceServer
// for forward compatibility
type EulaServiceServer interface {
	AcceptEula(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedEulaServiceServer()
}

// UnimplementedEulaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEulaServiceServer struct {
}

func (UnimplementedEulaServiceServer) AcceptEula(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptEula not implemented")
}
func (UnimplementedEulaServiceServer) mustEmbedUnimplementedEulaServiceServer() {}

// UnsafeEulaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EulaServiceServer will
// result in compilation errors.
type UnsafeEulaServiceServer interface {
	mustEmbedUnimplementedEulaServiceServer()
}

func RegisterEulaServiceServer(s grpc.ServiceRegistrar, srv EulaServiceServer) {
	s.RegisterService(&EulaService_ServiceDesc, srv)
}

func _EulaService_AcceptEula_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EulaServiceServer).AcceptEula(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eula.EulaService/AcceptEula",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EulaServiceServer).AcceptEula(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// EulaService_ServiceDesc is the grpc.ServiceDesc for EulaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EulaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eula.EulaService",
	HandlerType: (*EulaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcceptEula",
			Handler:    _EulaService_AcceptEula_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/eula.proto",
}
