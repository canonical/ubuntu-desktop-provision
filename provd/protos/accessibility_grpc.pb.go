// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.23.4
// source: protos/accessibility.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AccessibilityService_GetHighContrast_FullMethodName       = "/accessibility.AccessibilityService/GetHighContrast"
	AccessibilityService_EnableHighContrast_FullMethodName    = "/accessibility.AccessibilityService/EnableHighContrast"
	AccessibilityService_DisableHighContrast_FullMethodName   = "/accessibility.AccessibilityService/DisableHighContrast"
	AccessibilityService_GetReducedMotion_FullMethodName      = "/accessibility.AccessibilityService/GetReducedMotion"
	AccessibilityService_EnableReducedMotion_FullMethodName   = "/accessibility.AccessibilityService/EnableReducedMotion"
	AccessibilityService_DisableReducedMotion_FullMethodName  = "/accessibility.AccessibilityService/DisableReducedMotion"
	AccessibilityService_GetLargeText_FullMethodName          = "/accessibility.AccessibilityService/GetLargeText"
	AccessibilityService_EnableLargeText_FullMethodName       = "/accessibility.AccessibilityService/EnableLargeText"
	AccessibilityService_DisableLargeText_FullMethodName      = "/accessibility.AccessibilityService/DisableLargeText"
	AccessibilityService_GetScreenReader_FullMethodName       = "/accessibility.AccessibilityService/GetScreenReader"
	AccessibilityService_EnableScreenReader_FullMethodName    = "/accessibility.AccessibilityService/EnableScreenReader"
	AccessibilityService_DisableScreenReader_FullMethodName   = "/accessibility.AccessibilityService/DisableScreenReader"
	AccessibilityService_GetVisualAlerts_FullMethodName       = "/accessibility.AccessibilityService/GetVisualAlerts"
	AccessibilityService_EnableVisualAlerts_FullMethodName    = "/accessibility.AccessibilityService/EnableVisualAlerts"
	AccessibilityService_DisableVisualAlerts_FullMethodName   = "/accessibility.AccessibilityService/DisableVisualAlerts"
	AccessibilityService_GetScreenKeyboard_FullMethodName     = "/accessibility.AccessibilityService/GetScreenKeyboard"
	AccessibilityService_EnableScreenKeyboard_FullMethodName  = "/accessibility.AccessibilityService/EnableScreenKeyboard"
	AccessibilityService_DisableScreenKeyboard_FullMethodName = "/accessibility.AccessibilityService/DisableScreenKeyboard"
	AccessibilityService_GetStickyKeys_FullMethodName         = "/accessibility.AccessibilityService/GetStickyKeys"
	AccessibilityService_EnableStickyKeys_FullMethodName      = "/accessibility.AccessibilityService/EnableStickyKeys"
	AccessibilityService_DisableStickyKeys_FullMethodName     = "/accessibility.AccessibilityService/DisableStickyKeys"
	AccessibilityService_GetSlowKeys_FullMethodName           = "/accessibility.AccessibilityService/GetSlowKeys"
	AccessibilityService_EnableSlowKeys_FullMethodName        = "/accessibility.AccessibilityService/EnableSlowKeys"
	AccessibilityService_DisableSlowKeys_FullMethodName       = "/accessibility.AccessibilityService/DisableSlowKeys"
	AccessibilityService_GetMouseKeys_FullMethodName          = "/accessibility.AccessibilityService/GetMouseKeys"
	AccessibilityService_EnableMouseKeys_FullMethodName       = "/accessibility.AccessibilityService/EnableMouseKeys"
	AccessibilityService_DisableMouseKeys_FullMethodName      = "/accessibility.AccessibilityService/DisableMouseKeys"
	AccessibilityService_GetDesktopZoom_FullMethodName        = "/accessibility.AccessibilityService/GetDesktopZoom"
	AccessibilityService_EnableDesktopZoom_FullMethodName     = "/accessibility.AccessibilityService/EnableDesktopZoom"
	AccessibilityService_DisableDesktopZoom_FullMethodName    = "/accessibility.AccessibilityService/DisableDesktopZoom"
)

// AccessibilityServiceClient is the client API for AccessibilityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessibilityServiceClient interface {
	// Seeing
	GetHighContrast(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	EnableHighContrast(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DisableHighContrast(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetReducedMotion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	EnableReducedMotion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DisableReducedMotion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetLargeText(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	EnableLargeText(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DisableLargeText(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetScreenReader(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	EnableScreenReader(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DisableScreenReader(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Hearing
	GetVisualAlerts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	EnableVisualAlerts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DisableVisualAlerts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Typing
	GetScreenKeyboard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	EnableScreenKeyboard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DisableScreenKeyboard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetStickyKeys(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	EnableStickyKeys(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DisableStickyKeys(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSlowKeys(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	EnableSlowKeys(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DisableSlowKeys(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Pointing & Clicking
	GetMouseKeys(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	EnableMouseKeys(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DisableMouseKeys(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Zoom
	GetDesktopZoom(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	EnableDesktopZoom(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DisableDesktopZoom(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type accessibilityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessibilityServiceClient(cc grpc.ClientConnInterface) AccessibilityServiceClient {
	return &accessibilityServiceClient{cc}
}

func (c *accessibilityServiceClient) GetHighContrast(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, AccessibilityService_GetHighContrast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityServiceClient) EnableHighContrast(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccessibilityService_EnableHighContrast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityServiceClient) DisableHighContrast(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccessibilityService_DisableHighContrast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityServiceClient) GetReducedMotion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, AccessibilityService_GetReducedMotion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityServiceClient) EnableReducedMotion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccessibilityService_EnableReducedMotion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityServiceClient) DisableReducedMotion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccessibilityService_DisableReducedMotion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityServiceClient) GetLargeText(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, AccessibilityService_GetLargeText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityServiceClient) EnableLargeText(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccessibilityService_EnableLargeText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityServiceClient) DisableLargeText(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccessibilityService_DisableLargeText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityServiceClient) GetScreenReader(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, AccessibilityService_GetScreenReader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityServiceClient) EnableScreenReader(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccessibilityService_EnableScreenReader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityServiceClient) DisableScreenReader(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccessibilityService_DisableScreenReader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityServiceClient) GetVisualAlerts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, AccessibilityService_GetVisualAlerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityServiceClient) EnableVisualAlerts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccessibilityService_EnableVisualAlerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityServiceClient) DisableVisualAlerts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccessibilityService_DisableVisualAlerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityServiceClient) GetScreenKeyboard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, AccessibilityService_GetScreenKeyboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityServiceClient) EnableScreenKeyboard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccessibilityService_EnableScreenKeyboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityServiceClient) DisableScreenKeyboard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccessibilityService_DisableScreenKeyboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityServiceClient) GetStickyKeys(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, AccessibilityService_GetStickyKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityServiceClient) EnableStickyKeys(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccessibilityService_EnableStickyKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityServiceClient) DisableStickyKeys(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccessibilityService_DisableStickyKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityServiceClient) GetSlowKeys(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, AccessibilityService_GetSlowKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityServiceClient) EnableSlowKeys(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccessibilityService_EnableSlowKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityServiceClient) DisableSlowKeys(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccessibilityService_DisableSlowKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityServiceClient) GetMouseKeys(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, AccessibilityService_GetMouseKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityServiceClient) EnableMouseKeys(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccessibilityService_EnableMouseKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityServiceClient) DisableMouseKeys(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccessibilityService_DisableMouseKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityServiceClient) GetDesktopZoom(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, AccessibilityService_GetDesktopZoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityServiceClient) EnableDesktopZoom(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccessibilityService_EnableDesktopZoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityServiceClient) DisableDesktopZoom(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccessibilityService_DisableDesktopZoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessibilityServiceServer is the server API for AccessibilityService service.
// All implementations must embed UnimplementedAccessibilityServiceServer
// for forward compatibility.
type AccessibilityServiceServer interface {
	// Seeing
	GetHighContrast(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error)
	EnableHighContrast(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	DisableHighContrast(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetReducedMotion(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error)
	EnableReducedMotion(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	DisableReducedMotion(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetLargeText(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error)
	EnableLargeText(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	DisableLargeText(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetScreenReader(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error)
	EnableScreenReader(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	DisableScreenReader(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Hearing
	GetVisualAlerts(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error)
	EnableVisualAlerts(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	DisableVisualAlerts(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Typing
	GetScreenKeyboard(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error)
	EnableScreenKeyboard(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	DisableScreenKeyboard(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetStickyKeys(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error)
	EnableStickyKeys(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	DisableStickyKeys(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetSlowKeys(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error)
	EnableSlowKeys(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	DisableSlowKeys(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Pointing & Clicking
	GetMouseKeys(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error)
	EnableMouseKeys(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	DisableMouseKeys(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Zoom
	GetDesktopZoom(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error)
	EnableDesktopZoom(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	DisableDesktopZoom(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedAccessibilityServiceServer()
}

// UnimplementedAccessibilityServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccessibilityServiceServer struct{}

func (UnimplementedAccessibilityServiceServer) GetHighContrast(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHighContrast not implemented")
}
func (UnimplementedAccessibilityServiceServer) EnableHighContrast(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableHighContrast not implemented")
}
func (UnimplementedAccessibilityServiceServer) DisableHighContrast(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableHighContrast not implemented")
}
func (UnimplementedAccessibilityServiceServer) GetReducedMotion(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReducedMotion not implemented")
}
func (UnimplementedAccessibilityServiceServer) EnableReducedMotion(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableReducedMotion not implemented")
}
func (UnimplementedAccessibilityServiceServer) DisableReducedMotion(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableReducedMotion not implemented")
}
func (UnimplementedAccessibilityServiceServer) GetLargeText(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLargeText not implemented")
}
func (UnimplementedAccessibilityServiceServer) EnableLargeText(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableLargeText not implemented")
}
func (UnimplementedAccessibilityServiceServer) DisableLargeText(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableLargeText not implemented")
}
func (UnimplementedAccessibilityServiceServer) GetScreenReader(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScreenReader not implemented")
}
func (UnimplementedAccessibilityServiceServer) EnableScreenReader(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableScreenReader not implemented")
}
func (UnimplementedAccessibilityServiceServer) DisableScreenReader(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableScreenReader not implemented")
}
func (UnimplementedAccessibilityServiceServer) GetVisualAlerts(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVisualAlerts not implemented")
}
func (UnimplementedAccessibilityServiceServer) EnableVisualAlerts(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableVisualAlerts not implemented")
}
func (UnimplementedAccessibilityServiceServer) DisableVisualAlerts(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableVisualAlerts not implemented")
}
func (UnimplementedAccessibilityServiceServer) GetScreenKeyboard(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScreenKeyboard not implemented")
}
func (UnimplementedAccessibilityServiceServer) EnableScreenKeyboard(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableScreenKeyboard not implemented")
}
func (UnimplementedAccessibilityServiceServer) DisableScreenKeyboard(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableScreenKeyboard not implemented")
}
func (UnimplementedAccessibilityServiceServer) GetStickyKeys(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStickyKeys not implemented")
}
func (UnimplementedAccessibilityServiceServer) EnableStickyKeys(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableStickyKeys not implemented")
}
func (UnimplementedAccessibilityServiceServer) DisableStickyKeys(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableStickyKeys not implemented")
}
func (UnimplementedAccessibilityServiceServer) GetSlowKeys(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlowKeys not implemented")
}
func (UnimplementedAccessibilityServiceServer) EnableSlowKeys(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableSlowKeys not implemented")
}
func (UnimplementedAccessibilityServiceServer) DisableSlowKeys(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableSlowKeys not implemented")
}
func (UnimplementedAccessibilityServiceServer) GetMouseKeys(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMouseKeys not implemented")
}
func (UnimplementedAccessibilityServiceServer) EnableMouseKeys(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableMouseKeys not implemented")
}
func (UnimplementedAccessibilityServiceServer) DisableMouseKeys(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableMouseKeys not implemented")
}
func (UnimplementedAccessibilityServiceServer) GetDesktopZoom(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDesktopZoom not implemented")
}
func (UnimplementedAccessibilityServiceServer) EnableDesktopZoom(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableDesktopZoom not implemented")
}
func (UnimplementedAccessibilityServiceServer) DisableDesktopZoom(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableDesktopZoom not implemented")
}
func (UnimplementedAccessibilityServiceServer) mustEmbedUnimplementedAccessibilityServiceServer() {}
func (UnimplementedAccessibilityServiceServer) testEmbeddedByValue()                              {}

// UnsafeAccessibilityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessibilityServiceServer will
// result in compilation errors.
type UnsafeAccessibilityServiceServer interface {
	mustEmbedUnimplementedAccessibilityServiceServer()
}

func RegisterAccessibilityServiceServer(s grpc.ServiceRegistrar, srv AccessibilityServiceServer) {
	// If the following call pancis, it indicates UnimplementedAccessibilityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccessibilityService_ServiceDesc, srv)
}

func _AccessibilityService_GetHighContrast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).GetHighContrast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_GetHighContrast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).GetHighContrast(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityService_EnableHighContrast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).EnableHighContrast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_EnableHighContrast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).EnableHighContrast(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityService_DisableHighContrast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).DisableHighContrast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_DisableHighContrast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).DisableHighContrast(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityService_GetReducedMotion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).GetReducedMotion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_GetReducedMotion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).GetReducedMotion(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityService_EnableReducedMotion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).EnableReducedMotion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_EnableReducedMotion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).EnableReducedMotion(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityService_DisableReducedMotion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).DisableReducedMotion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_DisableReducedMotion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).DisableReducedMotion(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityService_GetLargeText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).GetLargeText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_GetLargeText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).GetLargeText(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityService_EnableLargeText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).EnableLargeText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_EnableLargeText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).EnableLargeText(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityService_DisableLargeText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).DisableLargeText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_DisableLargeText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).DisableLargeText(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityService_GetScreenReader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).GetScreenReader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_GetScreenReader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).GetScreenReader(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityService_EnableScreenReader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).EnableScreenReader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_EnableScreenReader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).EnableScreenReader(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityService_DisableScreenReader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).DisableScreenReader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_DisableScreenReader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).DisableScreenReader(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityService_GetVisualAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).GetVisualAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_GetVisualAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).GetVisualAlerts(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityService_EnableVisualAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).EnableVisualAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_EnableVisualAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).EnableVisualAlerts(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityService_DisableVisualAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).DisableVisualAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_DisableVisualAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).DisableVisualAlerts(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityService_GetScreenKeyboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).GetScreenKeyboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_GetScreenKeyboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).GetScreenKeyboard(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityService_EnableScreenKeyboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).EnableScreenKeyboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_EnableScreenKeyboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).EnableScreenKeyboard(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityService_DisableScreenKeyboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).DisableScreenKeyboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_DisableScreenKeyboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).DisableScreenKeyboard(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityService_GetStickyKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).GetStickyKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_GetStickyKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).GetStickyKeys(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityService_EnableStickyKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).EnableStickyKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_EnableStickyKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).EnableStickyKeys(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityService_DisableStickyKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).DisableStickyKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_DisableStickyKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).DisableStickyKeys(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityService_GetSlowKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).GetSlowKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_GetSlowKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).GetSlowKeys(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityService_EnableSlowKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).EnableSlowKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_EnableSlowKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).EnableSlowKeys(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityService_DisableSlowKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).DisableSlowKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_DisableSlowKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).DisableSlowKeys(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityService_GetMouseKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).GetMouseKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_GetMouseKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).GetMouseKeys(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityService_EnableMouseKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).EnableMouseKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_EnableMouseKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).EnableMouseKeys(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityService_DisableMouseKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).DisableMouseKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_DisableMouseKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).DisableMouseKeys(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityService_GetDesktopZoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).GetDesktopZoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_GetDesktopZoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).GetDesktopZoom(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityService_EnableDesktopZoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).EnableDesktopZoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_EnableDesktopZoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).EnableDesktopZoom(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityService_DisableDesktopZoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityServiceServer).DisableDesktopZoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessibilityService_DisableDesktopZoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityServiceServer).DisableDesktopZoom(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessibilityService_ServiceDesc is the grpc.ServiceDesc for AccessibilityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessibilityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accessibility.AccessibilityService",
	HandlerType: (*AccessibilityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHighContrast",
			Handler:    _AccessibilityService_GetHighContrast_Handler,
		},
		{
			MethodName: "EnableHighContrast",
			Handler:    _AccessibilityService_EnableHighContrast_Handler,
		},
		{
			MethodName: "DisableHighContrast",
			Handler:    _AccessibilityService_DisableHighContrast_Handler,
		},
		{
			MethodName: "GetReducedMotion",
			Handler:    _AccessibilityService_GetReducedMotion_Handler,
		},
		{
			MethodName: "EnableReducedMotion",
			Handler:    _AccessibilityService_EnableReducedMotion_Handler,
		},
		{
			MethodName: "DisableReducedMotion",
			Handler:    _AccessibilityService_DisableReducedMotion_Handler,
		},
		{
			MethodName: "GetLargeText",
			Handler:    _AccessibilityService_GetLargeText_Handler,
		},
		{
			MethodName: "EnableLargeText",
			Handler:    _AccessibilityService_EnableLargeText_Handler,
		},
		{
			MethodName: "DisableLargeText",
			Handler:    _AccessibilityService_DisableLargeText_Handler,
		},
		{
			MethodName: "GetScreenReader",
			Handler:    _AccessibilityService_GetScreenReader_Handler,
		},
		{
			MethodName: "EnableScreenReader",
			Handler:    _AccessibilityService_EnableScreenReader_Handler,
		},
		{
			MethodName: "DisableScreenReader",
			Handler:    _AccessibilityService_DisableScreenReader_Handler,
		},
		{
			MethodName: "GetVisualAlerts",
			Handler:    _AccessibilityService_GetVisualAlerts_Handler,
		},
		{
			MethodName: "EnableVisualAlerts",
			Handler:    _AccessibilityService_EnableVisualAlerts_Handler,
		},
		{
			MethodName: "DisableVisualAlerts",
			Handler:    _AccessibilityService_DisableVisualAlerts_Handler,
		},
		{
			MethodName: "GetScreenKeyboard",
			Handler:    _AccessibilityService_GetScreenKeyboard_Handler,
		},
		{
			MethodName: "EnableScreenKeyboard",
			Handler:    _AccessibilityService_EnableScreenKeyboard_Handler,
		},
		{
			MethodName: "DisableScreenKeyboard",
			Handler:    _AccessibilityService_DisableScreenKeyboard_Handler,
		},
		{
			MethodName: "GetStickyKeys",
			Handler:    _AccessibilityService_GetStickyKeys_Handler,
		},
		{
			MethodName: "EnableStickyKeys",
			Handler:    _AccessibilityService_EnableStickyKeys_Handler,
		},
		{
			MethodName: "DisableStickyKeys",
			Handler:    _AccessibilityService_DisableStickyKeys_Handler,
		},
		{
			MethodName: "GetSlowKeys",
			Handler:    _AccessibilityService_GetSlowKeys_Handler,
		},
		{
			MethodName: "EnableSlowKeys",
			Handler:    _AccessibilityService_EnableSlowKeys_Handler,
		},
		{
			MethodName: "DisableSlowKeys",
			Handler:    _AccessibilityService_DisableSlowKeys_Handler,
		},
		{
			MethodName: "GetMouseKeys",
			Handler:    _AccessibilityService_GetMouseKeys_Handler,
		},
		{
			MethodName: "EnableMouseKeys",
			Handler:    _AccessibilityService_EnableMouseKeys_Handler,
		},
		{
			MethodName: "DisableMouseKeys",
			Handler:    _AccessibilityService_DisableMouseKeys_Handler,
		},
		{
			MethodName: "GetDesktopZoom",
			Handler:    _AccessibilityService_GetDesktopZoom_Handler,
		},
		{
			MethodName: "EnableDesktopZoom",
			Handler:    _AccessibilityService_EnableDesktopZoom_Handler,
		},
		{
			MethodName: "DisableDesktopZoom",
			Handler:    _AccessibilityService_DisableDesktopZoom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/accessibility.proto",
}
