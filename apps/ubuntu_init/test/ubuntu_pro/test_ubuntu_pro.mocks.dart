// Mocks generated by Mockito 5.4.4 from annotations
// in ubuntu_init/test/ubuntu_pro/test_ubuntu_pro.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:ubuntu_init/ubuntu_init.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [UbuntuProModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockUbuntuProModel extends _i1.Mock implements _i2.UbuntuProModel {
  MockUbuntuProModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get userCode => (super.noSuchMethod(
        Invocation.getter(#userCode),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#userCode),
        ),
      ) as String);

  @override
  bool get isAttachedThroughMagicAttach => (super.noSuchMethod(
        Invocation.getter(#isAttachedThroughMagicAttach),
        returnValue: false,
      ) as bool);

  @override
  bool get isAttached => (super.noSuchMethod(
        Invocation.getter(#isAttached),
        returnValue: false,
      ) as bool);

  @override
  bool get isAttachedThroughManualAttach => (super.noSuchMethod(
        Invocation.getter(#isAttachedThroughManualAttach),
        returnValue: false,
      ) as bool);

  @override
  bool get hasNoErrorWhenAttachingManually => (super.noSuchMethod(
        Invocation.getter(#hasNoErrorWhenAttachingManually),
        returnValue: false,
      ) as bool);

  @override
  bool get skipPro => (super.noSuchMethod(
        Invocation.getter(#skipPro),
        returnValue: false,
      ) as bool);

  @override
  set skipPro(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #skipPro,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set isAttached(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isAttached,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get token => (super.noSuchMethod(
        Invocation.getter(#token),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#token),
        ),
      ) as String);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void setToken(String? value) => super.noSuchMethod(
        Invocation.method(
          #setToken,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> magicAttach() => (super.noSuchMethod(
        Invocation.method(
          #magicAttach,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> attachManuallyToken() => (super.noSuchMethod(
        Invocation.method(
          #attachManuallyToken,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
