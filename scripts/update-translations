#!/usr/bin/env python3

import argparse
import glob
import logging
import json
import os
import sys

log = logging.getLogger(__name__)


class L10nUpdater:

    def __init__(self, source: str, target: str):
        self.source: str = source
        self.target: str = target

    def get_source_file(self, path: str) -> str:
        source_files = glob.glob(
            self.source + '/**/' + os.path.basename(path),
            recursive=True,
        )
        if len(source_files) != 1:
            raise Exception(f'none or multiple source files found for {path}')

        return source_files[0]

    def update_arb_files(self, target_template_path: str):
        with open(target_template_path) as f:
            target_template_json: dict[str, str] = json.load(f)
        source_template_path = self.get_source_file(target_template_path)
        with open(source_template_path) as f:
            source_template_json: dict[str, str] = json.load(f)

        target_arb_file_paths = glob.glob(
            os.path.dirname(target_template_path) + '/*.arb')
        target_arb_file_paths.remove(target_template_path)
        for target_arb_file_path in sorted(target_arb_file_paths):
            with open(target_arb_file_path) as f:
                target_arb_file_json: dict[str, str] = json.load(f)
            source_arb_file_path = self.get_source_file(target_arb_file_path)
            with open(source_arb_file_path) as f:
                source_arb_file_json: dict[str, str] = json.load(f)

            target_updated = False
            for source_key in source_arb_file_json:
                if source_key.startswith('@'):
                    continue
                if source_key not in target_template_json:
                    log.debug(
                        f'key {source_key} not found in target template file {target_template_path}'
                    )
                    continue
                if source_key not in source_template_json:
                    log.debug(
                        f'key {source_key} not found in source template file {source_template_path}'
                    )
                    continue
                if source_template_json[source_key] != target_template_json[
                        source_key]:
                    log.debug(
                        f'value for {source_key} in {target_template_path} is different in {source_template_path}: {target_template_json[source_key]} != {source_template_json[source_key]}'
                    )
                    continue
                if target_arb_file_json.get(
                        source_key) == source_arb_file_json[source_key]:
                    continue

                log.debug(
                    f'updating {source_key} in {target_arb_file_path} from {target_arb_file_json.get(source_key)} to {source_arb_file_json[source_key]}'
                )
                target_arb_file_json[source_key] = source_arb_file_json[
                    source_key]
                target_updated = True

            if target_updated:
                with open(target_arb_file_path, 'w') as f:
                    f.write(
                        json.dumps(
                            target_arb_file_json,
                            ensure_ascii=False,
                            indent=2,
                        ))
                log.info(f'updated {target_arb_file_path}')


def parse_args() -> (str, str):
    parser = argparse.ArgumentParser()
    parser.add_argument('-t', '--target', help='target directory')
    parser.add_argument('-s', '--source', help='source directory')
    parser.add_argument(
        '-v',
        '--verbose',
        help='be more verbose',
        action='store_true',
        default=False,
    )
    args = vars(parser.parse_args())
    if args['target'] is None or args['source'] is None:
        parser.print_usage()
        sys.exit(1)

    if args['verbose']:
        log.setLevel(logging.DEBUG)

    return (args['source'], args['target'])


def main():
    logging.basicConfig(level=logging.INFO)
    source, target = parse_args()
    l10n_updater = L10nUpdater(source, target)
    templates = glob.glob(target + '/**/*_en.arb', recursive=True)
    for template in templates:
        l10n_updater.update_arb_files(template)


if __name__ == '__main__':
    main()
